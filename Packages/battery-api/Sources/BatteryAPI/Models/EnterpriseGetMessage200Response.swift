//
// EnterpriseGetMessage200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EnterpriseGetMessage200Response: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case pending = "pending"
        case completed = "completed"
        case failed = "failed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var paymentTxHash: String?
    public var committedTxHash: String?
    public var status: Status
    public var finalCost: String?
    public var failedReason: String?

    public init(paymentTxHash: String? = nil, committedTxHash: String? = nil, status: Status, finalCost: String? = nil, failedReason: String? = nil) {
        self.paymentTxHash = paymentTxHash
        self.committedTxHash = committedTxHash
        self.status = status
        self.finalCost = finalCost
        self.failedReason = failedReason
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case paymentTxHash = "payment_tx_hash"
        case committedTxHash = "committed_tx_hash"
        case status
        case finalCost = "final_cost"
        case failedReason = "failed_reason"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(paymentTxHash, forKey: .paymentTxHash)
        try container.encodeIfPresent(committedTxHash, forKey: .committedTxHash)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(finalCost, forKey: .finalCost)
        try container.encodeIfPresent(failedReason, forKey: .failedReason)
    }
}

