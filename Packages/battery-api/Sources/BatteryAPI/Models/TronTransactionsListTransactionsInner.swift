//
// TronTransactionsListTransactionsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TronTransactionsListTransactionsInner: Codable, JSONEncodable, Hashable {

    public var txid: String
    public var fromAccount: String
    public var toAccount: String
    public var amount: String
    public var isPending: Bool
    public var isFailed: Bool
    public var batteryCharges: Int
    public var timestamp: Int64
    public var trongridResult: Int?

    public init(txid: String, fromAccount: String, toAccount: String, amount: String, isPending: Bool, isFailed: Bool, batteryCharges: Int, timestamp: Int64, trongridResult: Int? = nil) {
        self.txid = txid
        self.fromAccount = fromAccount
        self.toAccount = toAccount
        self.amount = amount
        self.isPending = isPending
        self.isFailed = isFailed
        self.batteryCharges = batteryCharges
        self.timestamp = timestamp
        self.trongridResult = trongridResult
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case txid
        case fromAccount = "from_account"
        case toAccount = "to_account"
        case amount
        case isPending = "is_pending"
        case isFailed = "is_failed"
        case batteryCharges = "battery_charges"
        case timestamp
        case trongridResult = "trongrid_result"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(txid, forKey: .txid)
        try container.encode(fromAccount, forKey: .fromAccount)
        try container.encode(toAccount, forKey: .toAccount)
        try container.encode(amount, forKey: .amount)
        try container.encode(isPending, forKey: .isPending)
        try container.encode(isFailed, forKey: .isFailed)
        try container.encode(batteryCharges, forKey: .batteryCharges)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(trongridResult, forKey: .trongridResult)
    }
}

