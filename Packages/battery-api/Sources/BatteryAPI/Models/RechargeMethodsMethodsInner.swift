//
// RechargeMethodsMethodsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RechargeMethodsMethodsInner: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case jetton = "jetton"
        case ton = "ton"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var image: String?
    public var jettonMaster: String?
    public var minBootstrapValue: String?
    public var type: ModelType
    public var rate: String
    public var symbol: String
    public var decimals: Int
    public var supportGasless: Bool
    public var supportRecharge: Bool

    public init(image: String? = nil, jettonMaster: String? = nil, minBootstrapValue: String? = nil, type: ModelType, rate: String, symbol: String, decimals: Int, supportGasless: Bool, supportRecharge: Bool) {
        self.image = image
        self.jettonMaster = jettonMaster
        self.minBootstrapValue = minBootstrapValue
        self.type = type
        self.rate = rate
        self.symbol = symbol
        self.decimals = decimals
        self.supportGasless = supportGasless
        self.supportRecharge = supportRecharge
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case image
        case jettonMaster = "jetton_master"
        case minBootstrapValue = "min_bootstrap_value"
        case type
        case rate
        case symbol
        case decimals
        case supportGasless = "support_gasless"
        case supportRecharge = "support_recharge"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(jettonMaster, forKey: .jettonMaster)
        try container.encodeIfPresent(minBootstrapValue, forKey: .minBootstrapValue)
        try container.encode(type, forKey: .type)
        try container.encode(rate, forKey: .rate)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(decimals, forKey: .decimals)
        try container.encode(supportGasless, forKey: .supportGasless)
        try container.encode(supportRecharge, forKey: .supportRecharge)
    }
}

