//
// PurchasesPurchasesInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PurchasesPurchasesInner: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case android = "android"
        case ios = "ios"
        case promoCode = "promo-code"
        case crypto = "crypto"
        case gift = "gift"
        case onTheWayGift = "on-the-way-gift"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var promo: String?
    public var forAccountId: String?
    @available(*, deprecated, message: "This property is deprecated.")
    public var userPurchaseId: Int
    public var purchaseId: Int
    public var type: ModelType
    /** Amount describes the amount paid by the user for this purchase when we know it. For crypto purchases it is always set. */
    public var amount: String?
    public var charges: Int
    /** Currency is set when we know it. For crypto purchases it is always set. */
    public var currency: String?
    public var datetime: String
    public var refundInformation: PurchasesPurchasesInnerRefundInformation?

    public init(promo: String? = nil, forAccountId: String? = nil, userPurchaseId: Int, purchaseId: Int, type: ModelType, amount: String? = nil, charges: Int, currency: String? = nil, datetime: String, refundInformation: PurchasesPurchasesInnerRefundInformation? = nil) {
        self.promo = promo
        self.forAccountId = forAccountId
        self.userPurchaseId = userPurchaseId
        self.purchaseId = purchaseId
        self.type = type
        self.amount = amount
        self.charges = charges
        self.currency = currency
        self.datetime = datetime
        self.refundInformation = refundInformation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case promo
        case forAccountId = "for_account_id"
        case userPurchaseId = "user_purchase_id"
        case purchaseId = "purchase_id"
        case type
        case amount
        case charges
        case currency
        case datetime
        case refundInformation = "refund_information"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(promo, forKey: .promo)
        try container.encodeIfPresent(forAccountId, forKey: .forAccountId)
        try container.encode(userPurchaseId, forKey: .userPurchaseId)
        try container.encode(purchaseId, forKey: .purchaseId)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encode(charges, forKey: .charges)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encode(datetime, forKey: .datetime)
        try container.encodeIfPresent(refundInformation, forKey: .refundInformation)
    }
}

