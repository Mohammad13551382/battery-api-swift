//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter androidBatteryPurchaseRequest: (body) In-App purchase 
     - returns: AndroidBatteryPurchaseStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func androidBatteryPurchase(xTonConnectAuth: String, androidBatteryPurchaseRequest: AndroidBatteryPurchaseRequest) async throws -> AndroidBatteryPurchaseStatus {
        return try await androidBatteryPurchaseWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, androidBatteryPurchaseRequest: androidBatteryPurchaseRequest).execute().body
    }

    /**
     - POST /purchase-battery/android
     - verify an in-app purchase
     - parameter xTonConnectAuth: (header)  
     - parameter androidBatteryPurchaseRequest: (body) In-App purchase 
     - returns: RequestBuilder<AndroidBatteryPurchaseStatus> 
     */
    open class func androidBatteryPurchaseWithRequestBuilder(xTonConnectAuth: String, androidBatteryPurchaseRequest: AndroidBatteryPurchaseRequest) -> RequestBuilder<AndroidBatteryPurchaseStatus> {
        let localVariablePath = "/purchase-battery/android"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: androidBatteryPurchaseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AndroidBatteryPurchaseStatus>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter appStoreNotificationRequest: (body)  
     - returns: AnyCodable
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreNotification(appStoreNotificationRequest: AppStoreNotificationRequest) async throws -> AnyCodable {
        return try await appStoreNotificationWithRequestBuilder(appStoreNotificationRequest: appStoreNotificationRequest).execute().body
    }

    /**
     - POST /purchase-battery/ios/app-store-notification
     - parameter appStoreNotificationRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func appStoreNotificationWithRequestBuilder(appStoreNotificationRequest: AppStoreNotificationRequest) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/purchase-battery/ios/app-store-notification"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreNotificationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter token: (query)  
     - parameter applyPromoRequest: (body)  
     - returns: PromoCodeBatteryPurchaseStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func applyPromo(token: String, applyPromoRequest: ApplyPromoRequest) async throws -> PromoCodeBatteryPurchaseStatus {
        return try await applyPromoWithRequestBuilder(token: token, applyPromoRequest: applyPromoRequest).execute().body
    }

    /**
     - POST /restricted/apply-promo
     - parameter token: (query)  
     - parameter applyPromoRequest: (body)  
     - returns: RequestBuilder<PromoCodeBatteryPurchaseStatus> 
     */
    open class func applyPromoWithRequestBuilder(token: String, applyPromoRequest: ApplyPromoRequest) -> RequestBuilder<PromoCodeBatteryPurchaseStatus> {
        let localVariablePath = "/restricted/apply-promo"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applyPromoRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": (wrappedValue: token.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromoCodeBatteryPurchaseStatus>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter token: (query)  
     - parameter createCustomRefundRequest: (body)  
     - returns: [String: AnyCodable]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createCustomRefund(token: String, createCustomRefundRequest: CreateCustomRefundRequest) async throws -> [String: AnyCodable] {
        return try await createCustomRefundWithRequestBuilder(token: token, createCustomRefundRequest: createCustomRefundRequest).execute().body
    }

    /**
     - POST /restricted/create-custom-refund
     - parameter token: (query)  
     - parameter createCustomRefundRequest: (body)  
     - returns: RequestBuilder<[String: AnyCodable]> 
     */
    open class func createCustomRefundWithRequestBuilder(token: String, createCustomRefundRequest: CreateCustomRefundRequest) -> RequestBuilder<[String: AnyCodable]> {
        let localVariablePath = "/restricted/create-custom-refund"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCustomRefundRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": (wrappedValue: token.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyCodable]>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter token: (query)  
     - parameter createPromoCampaignRequest: (body)  
     - returns: CreatePromoCampaign200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createPromoCampaign(token: String, createPromoCampaignRequest: CreatePromoCampaignRequest) async throws -> CreatePromoCampaign200Response {
        return try await createPromoCampaignWithRequestBuilder(token: token, createPromoCampaignRequest: createPromoCampaignRequest).execute().body
    }

    /**
     - POST /restricted/promo-campaign
     - parameter token: (query)  
     - parameter createPromoCampaignRequest: (body)  
     - returns: RequestBuilder<CreatePromoCampaign200Response> 
     */
    open class func createPromoCampaignWithRequestBuilder(token: String, createPromoCampaignRequest: CreatePromoCampaignRequest) -> RequestBuilder<CreatePromoCampaign200Response> {
        let localVariablePath = "/restricted/promo-campaign"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPromoCampaignRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": (wrappedValue: token.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreatePromoCampaign200Response>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xEnterpriseAuth: (header)  
     - parameter walletId: (path)  
     - parameter enterpriseEstimateRequest: (body) bag-of-cells serialized to base64 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter emulate: (query)  (optional, default to false)
     - returns: EnterpriseEstimate200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseEstimate(xEnterpriseAuth: String, walletId: String, enterpriseEstimateRequest: EnterpriseEstimateRequest, acceptLanguage: String? = nil, emulate: Bool? = nil) async throws -> EnterpriseEstimate200Response {
        return try await enterpriseEstimateWithRequestBuilder(xEnterpriseAuth: xEnterpriseAuth, walletId: walletId, enterpriseEstimateRequest: enterpriseEstimateRequest, acceptLanguage: acceptLanguage, emulate: emulate).execute().body
    }

    /**
     - POST /enterprise/wallets/{wallet_id}/estimate
     - parameter xEnterpriseAuth: (header)  
     - parameter walletId: (path)  
     - parameter enterpriseEstimateRequest: (body) bag-of-cells serialized to base64 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter emulate: (query)  (optional, default to false)
     - returns: RequestBuilder<EnterpriseEstimate200Response> 
     */
    open class func enterpriseEstimateWithRequestBuilder(xEnterpriseAuth: String, walletId: String, enterpriseEstimateRequest: EnterpriseEstimateRequest, acceptLanguage: String? = nil, emulate: Bool? = nil) -> RequestBuilder<EnterpriseEstimate200Response> {
        var localVariablePath = "/enterprise/wallets/{wallet_id}/estimate"
        let walletIdPreEscape = "\(APIHelper.mapValueToPathItem(walletId))"
        let walletIdPostEscape = walletIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{wallet_id}", with: walletIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: enterpriseEstimateRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "emulate": (wrappedValue: emulate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Enterprise-Auth": xEnterpriseAuth.encodeToJSON(),
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnterpriseEstimate200Response>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xEnterpriseAuth: (header)  
     - parameter msgId: (path)  
     - returns: EnterpriseGetMessage200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseGetMessage(xEnterpriseAuth: String, msgId: String) async throws -> EnterpriseGetMessage200Response {
        return try await enterpriseGetMessageWithRequestBuilder(xEnterpriseAuth: xEnterpriseAuth, msgId: msgId).execute().body
    }

    /**
     - GET /enterprise/messages/{msg_id}
     - parameter xEnterpriseAuth: (header)  
     - parameter msgId: (path)  
     - returns: RequestBuilder<EnterpriseGetMessage200Response> 
     */
    open class func enterpriseGetMessageWithRequestBuilder(xEnterpriseAuth: String, msgId: String) -> RequestBuilder<EnterpriseGetMessage200Response> {
        var localVariablePath = "/enterprise/messages/{msg_id}"
        let msgIdPreEscape = "\(APIHelper.mapValueToPathItem(msgId))"
        let msgIdPostEscape = msgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{msg_id}", with: msgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Enterprise-Auth": xEnterpriseAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnterpriseGetMessage200Response>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xEnterpriseAuth: (header)  
     - returns: EnterpriseGetStatus200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseGetStatus(xEnterpriseAuth: String) async throws -> EnterpriseGetStatus200Response {
        return try await enterpriseGetStatusWithRequestBuilder(xEnterpriseAuth: xEnterpriseAuth).execute().body
    }

    /**
     - GET /enterprise/status
     - parameter xEnterpriseAuth: (header)  
     - returns: RequestBuilder<EnterpriseGetStatus200Response> 
     */
    open class func enterpriseGetStatusWithRequestBuilder(xEnterpriseAuth: String) -> RequestBuilder<EnterpriseGetStatus200Response> {
        let localVariablePath = "/enterprise/status"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Enterprise-Auth": xEnterpriseAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnterpriseGetStatus200Response>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xEnterpriseAuth: (header)  
     - parameter walletId: (path)  
     - returns: EnterpriseWalletConfig
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseGetWalletConfig(xEnterpriseAuth: String, walletId: String) async throws -> EnterpriseWalletConfig {
        return try await enterpriseGetWalletConfigWithRequestBuilder(xEnterpriseAuth: xEnterpriseAuth, walletId: walletId).execute().body
    }

    /**
     - GET /enterprise/wallets/{wallet_id}/config
     - parameter xEnterpriseAuth: (header)  
     - parameter walletId: (path)  
     - returns: RequestBuilder<EnterpriseWalletConfig> 
     */
    open class func enterpriseGetWalletConfigWithRequestBuilder(xEnterpriseAuth: String, walletId: String) -> RequestBuilder<EnterpriseWalletConfig> {
        var localVariablePath = "/enterprise/wallets/{wallet_id}/config"
        let walletIdPreEscape = "\(APIHelper.mapValueToPathItem(walletId))"
        let walletIdPostEscape = walletIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{wallet_id}", with: walletIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Enterprise-Auth": xEnterpriseAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnterpriseWalletConfig>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xEnterpriseAuth: (header)  
     - parameter walletId: (path)  
     - parameter enterpriseEstimateRequest: (body) bag-of-cells serialized to base64 
     - returns: EnterpriseSend200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enterpriseSend(xEnterpriseAuth: String, walletId: String, enterpriseEstimateRequest: EnterpriseEstimateRequest) async throws -> EnterpriseSend200Response {
        return try await enterpriseSendWithRequestBuilder(xEnterpriseAuth: xEnterpriseAuth, walletId: walletId, enterpriseEstimateRequest: enterpriseEstimateRequest).execute().body
    }

    /**
     - POST /enterprise/wallets/{wallet_id}/send
     - parameter xEnterpriseAuth: (header)  
     - parameter walletId: (path)  
     - parameter enterpriseEstimateRequest: (body) bag-of-cells serialized to base64 
     - returns: RequestBuilder<EnterpriseSend200Response> 
     */
    open class func enterpriseSendWithRequestBuilder(xEnterpriseAuth: String, walletId: String, enterpriseEstimateRequest: EnterpriseEstimateRequest) -> RequestBuilder<EnterpriseSend200Response> {
        var localVariablePath = "/enterprise/wallets/{wallet_id}/send"
        let walletIdPreEscape = "\(APIHelper.mapValueToPathItem(walletId))"
        let walletIdPostEscape = walletIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{wallet_id}", with: walletIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: enterpriseEstimateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Enterprise-Auth": xEnterpriseAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnterpriseSend200Response>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter jettonMaster: (path)  
     - parameter estimateGaslessCostRequest: (body)  
     - parameter xTonConnectAuth: (header)  (optional)
     - parameter walletAddress: (query)  (optional)
     - parameter walletPublicKey: (query)  (optional)
     - returns: GaslessEstimation
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func estimateGaslessCost(jettonMaster: String, estimateGaslessCostRequest: EstimateGaslessCostRequest, xTonConnectAuth: String? = nil, walletAddress: String? = nil, walletPublicKey: String? = nil) async throws -> GaslessEstimation {
        return try await estimateGaslessCostWithRequestBuilder(jettonMaster: jettonMaster, estimateGaslessCostRequest: estimateGaslessCostRequest, xTonConnectAuth: xTonConnectAuth, walletAddress: walletAddress, walletPublicKey: walletPublicKey).execute().body
    }

    /**
     - POST /gasless/estimate-cost/{jetton_master}
     - parameter jettonMaster: (path)  
     - parameter estimateGaslessCostRequest: (body)  
     - parameter xTonConnectAuth: (header)  (optional)
     - parameter walletAddress: (query)  (optional)
     - parameter walletPublicKey: (query)  (optional)
     - returns: RequestBuilder<GaslessEstimation> 
     */
    open class func estimateGaslessCostWithRequestBuilder(jettonMaster: String, estimateGaslessCostRequest: EstimateGaslessCostRequest, xTonConnectAuth: String? = nil, walletAddress: String? = nil, walletPublicKey: String? = nil) -> RequestBuilder<GaslessEstimation> {
        var localVariablePath = "/gasless/estimate-cost/{jetton_master}"
        let jettonMasterPreEscape = "\(APIHelper.mapValueToPathItem(jettonMaster))"
        let jettonMasterPostEscape = jettonMasterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jetton_master}", with: jettonMasterPostEscape, options: .literal, range: nil)
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: estimateGaslessCostRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "wallet_address": (wrappedValue: walletAddress?.encodeToJSON(), isExplode: true),
            "wallet_public_key": (wrappedValue: walletPublicKey?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-TonConnect-Auth": xTonConnectAuth?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GaslessEstimation>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter token: (query)  
     - parameter purchaseId: (path)  
     - returns: [String: AnyCodable]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func extendRefundPeriod(token: String, purchaseId: Int64) async throws -> [String: AnyCodable] {
        return try await extendRefundPeriodWithRequestBuilder(token: token, purchaseId: purchaseId).execute().body
    }

    /**
     - POST /restricted/purchases/{purchase_id}/extend-refund-period
     - parameter token: (query)  
     - parameter purchaseId: (path)  
     - returns: RequestBuilder<[String: AnyCodable]> 
     */
    open class func extendRefundPeriodWithRequestBuilder(token: String, purchaseId: Int64) -> RequestBuilder<[String: AnyCodable]> {
        var localVariablePath = "/restricted/purchases/{purchase_id}/extend-refund-period"
        let purchaseIdPreEscape = "\(APIHelper.mapValueToPathItem(purchaseId))"
        let purchaseIdPostEscape = purchaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{purchase_id}", with: purchaseIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": (wrappedValue: token.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyCodable]>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter units
     */
    public enum Units_getBalance: String, CaseIterable {
        case usd = "usd"
        case ton = "ton"
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter units: (query)  (optional, default to .usd)
     - returns: Balance
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getBalance(xTonConnectAuth: String, units: Units_getBalance? = nil) async throws -> Balance {
        return try await getBalanceWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, units: units).execute().body
    }

    /**
     - GET /balance
     - This method returns information about a user's balance.
     - parameter xTonConnectAuth: (header)  
     - parameter units: (query)  (optional, default to .usd)
     - returns: RequestBuilder<Balance> 
     */
    open class func getBalanceWithRequestBuilder(xTonConnectAuth: String, units: Units_getBalance? = nil) -> RequestBuilder<Balance> {
        let localVariablePath = "/balance"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "units": (wrappedValue: units?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Balance>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (query)  
     - returns: BatteryCharged
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getBatteryCharged(accountId: String) async throws -> BatteryCharged {
        return try await getBatteryChargedWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - GET /battery-charged
     - This method returns information about a user's balance.
     - parameter accountId: (query)  
     - returns: RequestBuilder<BatteryCharged> 
     */
    open class func getBatteryChargedWithRequestBuilder(accountId: String) -> RequestBuilder<BatteryCharged> {
        let localVariablePath = "/battery-charged"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "account_id": (wrappedValue: accountId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatteryCharged>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - returns: Config
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getConfig() async throws -> Config {
        return try await getConfigWithRequestBuilder().execute().body
    }

    /**
     - GET /config
     - This method returns information about Battery Service.
     - returns: RequestBuilder<Config> 
     */
    open class func getConfigWithRequestBuilder() -> RequestBuilder<Config> {
        let localVariablePath = "/config"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Config>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter promo: (query)  
     - returns: PromoUsed
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPromoUsed(promo: String) async throws -> PromoUsed {
        return try await getPromoUsedWithRequestBuilder(promo: promo).execute().body
    }

    /**
     - GET /promo-used
     - parameter promo: (query)  
     - returns: RequestBuilder<PromoUsed> 
     */
    open class func getPromoUsedWithRequestBuilder(promo: String) -> RequestBuilder<PromoUsed> {
        let localVariablePath = "/promo-used"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "promo": (wrappedValue: promo.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromoUsed>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - parameter includeGiftsOnTheWay: (query)  (optional, default to false)
     - returns: Purchases
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPurchases(xTonConnectAuth: String, limit: Int? = nil, offset: Int? = nil, includeGiftsOnTheWay: Bool? = nil) async throws -> Purchases {
        return try await getPurchasesWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, limit: limit, offset: offset, includeGiftsOnTheWay: includeGiftsOnTheWay).execute().body
    }

    /**
     - GET /purchases
     - This method returns a list of purchases made by a specific user.
     - parameter xTonConnectAuth: (header)  
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - parameter includeGiftsOnTheWay: (query)  (optional, default to false)
     - returns: RequestBuilder<Purchases> 
     */
    open class func getPurchasesWithRequestBuilder(xTonConnectAuth: String, limit: Int? = nil, offset: Int? = nil, includeGiftsOnTheWay: Bool? = nil) -> RequestBuilder<Purchases> {
        let localVariablePath = "/purchases"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "include_gifts_on_the_way": (wrappedValue: includeGiftsOnTheWay?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Purchases>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter includeRechargeOnly: (query)  (optional, default to true)
     - returns: RechargeMethods
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getRechargeMethods(includeRechargeOnly: Bool? = nil) async throws -> RechargeMethods {
        return try await getRechargeMethodsWithRequestBuilder(includeRechargeOnly: includeRechargeOnly).execute().body
    }

    /**
     - GET /recharge-methods
     - This method returns on-chain recharge methods.
     - parameter includeRechargeOnly: (query)  (optional, default to true)
     - returns: RequestBuilder<RechargeMethods> 
     */
    open class func getRechargeMethodsWithRequestBuilder(includeRechargeOnly: Bool? = nil) -> RequestBuilder<RechargeMethods> {
        let localVariablePath = "/recharge-methods"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_recharge_only": (wrappedValue: includeRechargeOnly?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RechargeMethods>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - returns: Status
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getStatus(xTonConnectAuth: String) async throws -> Status {
        return try await getStatusWithRequestBuilder(xTonConnectAuth: xTonConnectAuth).execute().body
    }

    /**
     - GET /status
     - This method returns information about the current status of Battery Service.
     - parameter xTonConnectAuth: (header)  
     - returns: RequestBuilder<Status> 
     */
    open class func getStatusWithRequestBuilder(xTonConnectAuth: String) -> RequestBuilder<Status> {
        let localVariablePath = "/status"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Status>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - returns: Transactions
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTransactions(xTonConnectAuth: String, limit: Int? = nil, offset: Int? = nil) async throws -> Transactions {
        return try await getTransactionsWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, limit: limit, offset: offset).execute().body
    }

    /**
     - GET /transactions
     - This method returns a list of transactions made by a specific user.
     - parameter xTonConnectAuth: (header)  
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - returns: RequestBuilder<Transactions> 
     */
    open class func getTransactionsWithRequestBuilder(xTonConnectAuth: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Transactions> {
        let localVariablePath = "/transactions"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Transactions>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - returns: GetTronConfig200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTronConfig() async throws -> GetTronConfig200Response {
        return try await getTronConfigWithRequestBuilder().execute().body
    }

    /**
     - GET /v0/tron/config
     - returns: RequestBuilder<GetTronConfig200Response> 
     */
    open class func getTronConfigWithRequestBuilder() -> RequestBuilder<GetTronConfig200Response> {
        let localVariablePath = "/v0/tron/config"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetTronConfig200Response>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter limit: (query)  (optional, default to 1000)
     - parameter maxTimestamp: (query)  (optional)
     - returns: TronTransactionsList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getTronTransactions(xTonConnectAuth: String, limit: Int? = nil, maxTimestamp: Int64? = nil) async throws -> TronTransactionsList {
        return try await getTronTransactionsWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, limit: limit, maxTimestamp: maxTimestamp).execute().body
    }

    /**
     - GET /v0/tron/transactions
     - parameter xTonConnectAuth: (header)  
     - parameter limit: (query)  (optional, default to 1000)
     - parameter maxTimestamp: (query)  (optional)
     - returns: RequestBuilder<TronTransactionsList> 
     */
    open class func getTronTransactionsWithRequestBuilder(xTonConnectAuth: String, limit: Int? = nil, maxTimestamp: Int64? = nil) -> RequestBuilder<TronTransactionsList> {
        let localVariablePath = "/v0/tron/transactions"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "max_timestamp": (wrappedValue: maxTimestamp?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TronTransactionsList>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter iosBatteryPurchaseRequest: (body) In-App purchase 
     - returns: IOSBatteryPurchaseStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func iosBatteryPurchase(xTonConnectAuth: String, iosBatteryPurchaseRequest: IosBatteryPurchaseRequest) async throws -> IOSBatteryPurchaseStatus {
        return try await iosBatteryPurchaseWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, iosBatteryPurchaseRequest: iosBatteryPurchaseRequest).execute().body
    }

    /**
     - POST /purchase-battery/ios
     - verify an in-app purchase
     - parameter xTonConnectAuth: (header)  
     - parameter iosBatteryPurchaseRequest: (body) In-App purchase 
     - returns: RequestBuilder<IOSBatteryPurchaseStatus> 
     */
    open class func iosBatteryPurchaseWithRequestBuilder(xTonConnectAuth: String, iosBatteryPurchaseRequest: IosBatteryPurchaseRequest) -> RequestBuilder<IOSBatteryPurchaseStatus> {
        let localVariablePath = "/purchase-battery/ios"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: iosBatteryPurchaseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IOSBatteryPurchaseStatus>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter promoCodeBatteryPurchaseRequest: (body) charge battery with promo code 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - returns: PromoCodeBatteryPurchaseStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func promoCodeBatteryPurchase(xTonConnectAuth: String, promoCodeBatteryPurchaseRequest: PromoCodeBatteryPurchaseRequest, acceptLanguage: String? = nil) async throws -> PromoCodeBatteryPurchaseStatus {
        return try await promoCodeBatteryPurchaseWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, promoCodeBatteryPurchaseRequest: promoCodeBatteryPurchaseRequest, acceptLanguage: acceptLanguage).execute().body
    }

    /**
     - POST /purchase-battery/promo-code
     - charge battery with promo code
     - parameter xTonConnectAuth: (header)  
     - parameter promoCodeBatteryPurchaseRequest: (body) charge battery with promo code 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - returns: RequestBuilder<PromoCodeBatteryPurchaseStatus> 
     */
    open class func promoCodeBatteryPurchaseWithRequestBuilder(xTonConnectAuth: String, promoCodeBatteryPurchaseRequest: PromoCodeBatteryPurchaseRequest, acceptLanguage: String? = nil) -> RequestBuilder<PromoCodeBatteryPurchaseStatus> {
        let localVariablePath = "/purchase-battery/promo-code"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: promoCodeBatteryPurchaseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Accept-Language": acceptLanguage?.encodeToJSON(),
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromoCodeBatteryPurchaseStatus>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter requestRefundRequest: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func requestRefund(xTonConnectAuth: String, requestRefundRequest: RequestRefundRequest) async throws {
        return try await requestRefundWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, requestRefundRequest: requestRefundRequest).execute().body
    }

    /**
     - POST /request-refund
     - parameter xTonConnectAuth: (header)  
     - parameter requestRefundRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func requestRefundWithRequestBuilder(xTonConnectAuth: String, requestRefundRequest: RequestRefundRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/request-refund"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestRefundRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = BatteryAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter token: (query)  
     - parameter userId: (path)  
     - parameter resetUserBalanceRequest: (body)  
     - returns: [String: AnyCodable]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func resetUserBalance(token: String, userId: Int64, resetUserBalanceRequest: ResetUserBalanceRequest) async throws -> [String: AnyCodable] {
        return try await resetUserBalanceWithRequestBuilder(token: token, userId: userId, resetUserBalanceRequest: resetUserBalanceRequest).execute().body
    }

    /**
     - POST /restricted/users/{user_id}/reset-balance
     - parameter token: (query)  
     - parameter userId: (path)  
     - parameter resetUserBalanceRequest: (body)  
     - returns: RequestBuilder<[String: AnyCodable]> 
     */
    open class func resetUserBalanceWithRequestBuilder(token: String, userId: Int64, resetUserBalanceRequest: ResetUserBalanceRequest) -> RequestBuilder<[String: AnyCodable]> {
        var localVariablePath = "/restricted/users/{user_id}/reset-balance"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resetUserBalanceRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": (wrappedValue: token.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyCodable]>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter emulateMessageToWalletRequest: (body) bag-of-cells serialized to base64 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sendMessage(xTonConnectAuth: String, emulateMessageToWalletRequest: EmulateMessageToWalletRequest) async throws {
        return try await sendMessageWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, emulateMessageToWalletRequest: emulateMessageToWalletRequest).execute().body
    }

    /**
     - POST /message
     - Send message to blockchain
     - responseHeaders: [X-Battery-Protocol-Name(String)]
     - parameter xTonConnectAuth: (header)  
     - parameter emulateMessageToWalletRequest: (body) bag-of-cells serialized to base64 
     - returns: RequestBuilder<Void> 
     */
    open class func sendMessageWithRequestBuilder(xTonConnectAuth: String, emulateMessageToWalletRequest: EmulateMessageToWalletRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/message"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emulateMessageToWalletRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = BatteryAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter wallet: (query)  
     - parameter energy: (query)  (optional)
     - parameter bandwidth: (query)  (optional)
     - returns: EstimatedTronTx
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tronEstimate(wallet: String, energy: Int? = nil, bandwidth: Int? = nil) async throws -> EstimatedTronTx {
        return try await tronEstimateWithRequestBuilder(wallet: wallet, energy: energy, bandwidth: bandwidth).execute().body
    }

    /**
     - GET /v0/tron/estimate
     - Estimate cost of sending a tx in Tron network
     - parameter wallet: (query)  
     - parameter energy: (query)  (optional)
     - parameter bandwidth: (query)  (optional)
     - returns: RequestBuilder<EstimatedTronTx> 
     */
    open class func tronEstimateWithRequestBuilder(wallet: String, energy: Int? = nil, bandwidth: Int? = nil) -> RequestBuilder<EstimatedTronTx> {
        let localVariablePath = "/v0/tron/estimate"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "energy": (wrappedValue: energy?.encodeToJSON(), isExplode: true),
            "bandwidth": (wrappedValue: bandwidth?.encodeToJSON(), isExplode: true),
            "wallet": (wrappedValue: wallet.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EstimatedTronTx>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter xTonConnectAuth: (header)  
     - parameter tronSendRequest: (body)  
     - returns: SentTronTx
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tronSend(xTonConnectAuth: String, tronSendRequest: TronSendRequest) async throws -> SentTronTx {
        return try await tronSendWithRequestBuilder(xTonConnectAuth: xTonConnectAuth, tronSendRequest: tronSendRequest).execute().body
    }

    /**
     - POST /v0/tron/send
     - send TRON tx
     - parameter xTonConnectAuth: (header)  
     - parameter tronSendRequest: (body)  
     - returns: RequestBuilder<SentTronTx> 
     */
    open class func tronSendWithRequestBuilder(xTonConnectAuth: String, tronSendRequest: TronSendRequest) -> RequestBuilder<SentTronTx> {
        let localVariablePath = "/v0/tron/send"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tronSendRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-TonConnect-Auth": xTonConnectAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SentTronTx>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter promo: (query)  (optional)
     - returns: [String: AnyCodable]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func verifyPurchasePromo(promo: String? = nil) async throws -> [String: AnyCodable] {
        return try await verifyPurchasePromoWithRequestBuilder(promo: promo).execute().body
    }

    /**
     - GET /purchase-battery/verify-purchase-promo
     - parameter promo: (query)  (optional)
     - returns: RequestBuilder<[String: AnyCodable]> 
     */
    open class func verifyPurchasePromoWithRequestBuilder(promo: String? = nil) -> RequestBuilder<[String: AnyCodable]> {
        let localVariablePath = "/purchase-battery/verify-purchase-promo"
        let localVariableURLString = BatteryAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "promo": (wrappedValue: promo?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyCodable]>.Type = BatteryAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
