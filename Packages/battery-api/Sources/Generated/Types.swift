// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get a payload for further token receipt
    ///
    /// - Remark: HTTP `GET /tonconnect/payload`.
    /// - Remark: Generated from `#/paths//tonconnect/payload/get(getTonConnectPayload)`.
    func getTonConnectPayload(_ input: Operations.getTonConnectPayload.Input) async throws
        -> Operations.getTonConnectPayload.Output
    /// Account verification and token issuance
    ///
    /// - Remark: HTTP `POST /tonconnect/proof`.
    /// - Remark: Generated from `#/paths//tonconnect/proof/post(tonConnectProof)`.
    func tonConnectProof(_ input: Operations.tonConnectProof.Input) async throws -> Operations.tonConnectProof.Output
    /// This method returns information about the current status of Battery Service.
    ///
    /// - Remark: HTTP `GET /status`.
    /// - Remark: Generated from `#/paths//status/get(getStatus)`.
    func getStatus(_ input: Operations.getStatus.Input) async throws -> Operations.getStatus.Output
    /// This method returns information about Battery Service.
    ///
    /// - Remark: HTTP `GET /config`.
    /// - Remark: Generated from `#/paths//config/get(getConfig)`.
    func getConfig(_ input: Operations.getConfig.Input) async throws -> Operations.getConfig.Output
    /// This method returns information about a user's balance.
    ///
    /// - Remark: HTTP `GET /balance`.
    /// - Remark: Generated from `#/paths//balance/get(getBalance)`.
    func getBalance(_ input: Operations.getBalance.Input) async throws -> Operations.getBalance.Output
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /wallet/emulate`.
    /// - Remark: Generated from `#/paths//wallet/emulate/post(emulateMessageToWallet)`.
    func emulateMessageToWallet(_ input: Operations.emulateMessageToWallet.Input) async throws
        -> Operations.emulateMessageToWallet.Output
    /// Send message to blockchain
    ///
    /// - Remark: HTTP `POST /message`.
    /// - Remark: Generated from `#/paths//message/post(sendMessage)`.
    func sendMessage(_ input: Operations.sendMessage.Input) async throws -> Operations.sendMessage.Output
    /// verify an in-app purchase
    ///
    /// - Remark: HTTP `POST /purchase-battery/android`.
    /// - Remark: Generated from `#/paths//purchase-battery/android/post(androidBatteryPurchase)`.
    func androidBatteryPurchase(_ input: Operations.androidBatteryPurchase.Input) async throws
        -> Operations.androidBatteryPurchase.Output
    /// - Remark: HTTP `POST /purchase-battery/ios/app-store-notification`.
    /// - Remark: Generated from `#/paths//purchase-battery/ios/app-store-notification/post(appStoreNotification)`.
    func appStoreNotification(_ input: Operations.appStoreNotification.Input) async throws
        -> Operations.appStoreNotification.Output
    /// verify an in-app purchase
    ///
    /// - Remark: HTTP `POST /purchase-battery/ios`.
    /// - Remark: Generated from `#/paths//purchase-battery/ios/post(iosBatteryPurchase)`.
    func iosBatteryPurchase(_ input: Operations.iosBatteryPurchase.Input) async throws
        -> Operations.iosBatteryPurchase.Output
    /// charge battery with promo code
    ///
    /// - Remark: HTTP `POST /purchase-battery/promo-code`.
    /// - Remark: Generated from `#/paths//purchase-battery/promo-code/post(promoCodeBatteryPurchase)`.
    func promoCodeBatteryPurchase(_ input: Operations.promoCodeBatteryPurchase.Input) async throws
        -> Operations.promoCodeBatteryPurchase.Output
    /// This method returns on-chain recharge methods.
    ///
    /// - Remark: HTTP `GET /recharge-methods`.
    /// - Remark: Generated from `#/paths//recharge-methods/get(getRechargeMethods)`.
    func getRechargeMethods(_ input: Operations.getRechargeMethods.Input) async throws
        -> Operations.getRechargeMethods.Output
    /// - Remark: HTTP `POST /request-refund`.
    /// - Remark: Generated from `#/paths//request-refund/post(requestRefund)`.
    func requestRefund(_ input: Operations.requestRefund.Input) async throws -> Operations.requestRefund.Output
    /// This method returns a list of purchases made by a specific user.
    ///
    /// - Remark: HTTP `GET /purchases`.
    /// - Remark: Generated from `#/paths//purchases/get(getPurchases)`.
    func getPurchases(_ input: Operations.getPurchases.Input) async throws -> Operations.getPurchases.Output
    /// This method returns a list of transactions made by a specific user.
    ///
    /// - Remark: HTTP `GET /transactions`.
    /// - Remark: Generated from `#/paths//transactions/get(getTransactions)`.
    func getTransactions(_ input: Operations.getTransactions.Input) async throws -> Operations.getTransactions.Output
    /// - Remark: HTTP `POST /gasless/estimate-cost/{jetton_master}`.
    /// - Remark: Generated from `#/paths//gasless/estimate-cost/{jetton_master}/post(estimateGaslessCost)`.
    func estimateGaslessCost(_ input: Operations.estimateGaslessCost.Input) async throws
        -> Operations.estimateGaslessCost.Output
    /// - Remark: HTTP `POST /restricted/create-custom-refund`.
    /// - Remark: Generated from `#/paths//restricted/create-custom-refund/post(createCustomRefund)`.
    func createCustomRefund(_ input: Operations.createCustomRefund.Input) async throws
        -> Operations.createCustomRefund.Output
    /// - Remark: HTTP `POST /restricted/purchases/{purchase_id}/extend-refund-period`.
    /// - Remark: Generated from `#/paths//restricted/purchases/{purchase_id}/extend-refund-period/post(extendRefundPeriod)`.
    func extendRefundPeriod(_ input: Operations.extendRefundPeriod.Input) async throws
        -> Operations.extendRefundPeriod.Output
}
/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get a payload for further token receipt
    ///
    /// - Remark: HTTP `GET /tonconnect/payload`.
    /// - Remark: Generated from `#/paths//tonconnect/payload/get(getTonConnectPayload)`.
    public func getTonConnectPayload(headers: Operations.getTonConnectPayload.Input.Headers = .init()) async throws
        -> Operations.getTonConnectPayload.Output
    { try await getTonConnectPayload(Operations.getTonConnectPayload.Input(headers: headers)) }
    /// Account verification and token issuance
    ///
    /// - Remark: HTTP `POST /tonconnect/proof`.
    /// - Remark: Generated from `#/paths//tonconnect/proof/post(tonConnectProof)`.
    public func tonConnectProof(
        headers: Operations.tonConnectProof.Input.Headers = .init(),
        body: Components.RequestBodies.TonConnectProof
    ) async throws -> Operations.tonConnectProof.Output {
        try await tonConnectProof(Operations.tonConnectProof.Input(headers: headers, body: body))
    }
    /// This method returns information about the current status of Battery Service.
    ///
    /// - Remark: HTTP `GET /status`.
    /// - Remark: Generated from `#/paths//status/get(getStatus)`.
    public func getStatus(headers: Operations.getStatus.Input.Headers) async throws -> Operations.getStatus.Output {
        try await getStatus(Operations.getStatus.Input(headers: headers))
    }
    /// This method returns information about Battery Service.
    ///
    /// - Remark: HTTP `GET /config`.
    /// - Remark: Generated from `#/paths//config/get(getConfig)`.
    public func getConfig(headers: Operations.getConfig.Input.Headers = .init()) async throws
        -> Operations.getConfig.Output
    { try await getConfig(Operations.getConfig.Input(headers: headers)) }
    /// This method returns information about a user's balance.
    ///
    /// - Remark: HTTP `GET /balance`.
    /// - Remark: Generated from `#/paths//balance/get(getBalance)`.
    public func getBalance(
        query: Operations.getBalance.Input.Query = .init(),
        headers: Operations.getBalance.Input.Headers
    ) async throws -> Operations.getBalance.Output {
        try await getBalance(Operations.getBalance.Input(query: query, headers: headers))
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /wallet/emulate`.
    /// - Remark: Generated from `#/paths//wallet/emulate/post(emulateMessageToWallet)`.
    public func emulateMessageToWallet(
        headers: Operations.emulateMessageToWallet.Input.Headers,
        body: Components.RequestBodies.Boc
    ) async throws -> Operations.emulateMessageToWallet.Output {
        try await emulateMessageToWallet(Operations.emulateMessageToWallet.Input(headers: headers, body: body))
    }
    /// Send message to blockchain
    ///
    /// - Remark: HTTP `POST /message`.
    /// - Remark: Generated from `#/paths//message/post(sendMessage)`.
    public func sendMessage(headers: Operations.sendMessage.Input.Headers, body: Components.RequestBodies.Boc)
        async throws -> Operations.sendMessage.Output
    { try await sendMessage(Operations.sendMessage.Input(headers: headers, body: body)) }
    /// verify an in-app purchase
    ///
    /// - Remark: HTTP `POST /purchase-battery/android`.
    /// - Remark: Generated from `#/paths//purchase-battery/android/post(androidBatteryPurchase)`.
    public func androidBatteryPurchase(
        headers: Operations.androidBatteryPurchase.Input.Headers,
        body: Components.RequestBodies.AndroidBatteryPurchase
    ) async throws -> Operations.androidBatteryPurchase.Output {
        try await androidBatteryPurchase(Operations.androidBatteryPurchase.Input(headers: headers, body: body))
    }
    /// - Remark: HTTP `POST /purchase-battery/ios/app-store-notification`.
    /// - Remark: Generated from `#/paths//purchase-battery/ios/app-store-notification/post(appStoreNotification)`.
    public func appStoreNotification(
        headers: Operations.appStoreNotification.Input.Headers = .init(),
        body: Components.RequestBodies.appStoreNotification
    ) async throws -> Operations.appStoreNotification.Output {
        try await appStoreNotification(Operations.appStoreNotification.Input(headers: headers, body: body))
    }
    /// verify an in-app purchase
    ///
    /// - Remark: HTTP `POST /purchase-battery/ios`.
    /// - Remark: Generated from `#/paths//purchase-battery/ios/post(iosBatteryPurchase)`.
    public func iosBatteryPurchase(
        headers: Operations.iosBatteryPurchase.Input.Headers,
        body: Components.RequestBodies.iOSBatteryPurchase
    ) async throws -> Operations.iosBatteryPurchase.Output {
        try await iosBatteryPurchase(Operations.iosBatteryPurchase.Input(headers: headers, body: body))
    }
    /// charge battery with promo code
    ///
    /// - Remark: HTTP `POST /purchase-battery/promo-code`.
    /// - Remark: Generated from `#/paths//purchase-battery/promo-code/post(promoCodeBatteryPurchase)`.
    public func promoCodeBatteryPurchase(
        headers: Operations.promoCodeBatteryPurchase.Input.Headers,
        body: Components.RequestBodies.promoCodeBatteryPurchase
    ) async throws -> Operations.promoCodeBatteryPurchase.Output {
        try await promoCodeBatteryPurchase(Operations.promoCodeBatteryPurchase.Input(headers: headers, body: body))
    }
    /// This method returns on-chain recharge methods.
    ///
    /// - Remark: HTTP `GET /recharge-methods`.
    /// - Remark: Generated from `#/paths//recharge-methods/get(getRechargeMethods)`.
    public func getRechargeMethods(
        query: Operations.getRechargeMethods.Input.Query = .init(),
        headers: Operations.getRechargeMethods.Input.Headers = .init()
    ) async throws -> Operations.getRechargeMethods.Output {
        try await getRechargeMethods(Operations.getRechargeMethods.Input(query: query, headers: headers))
    }
    /// - Remark: HTTP `POST /request-refund`.
    /// - Remark: Generated from `#/paths//request-refund/post(requestRefund)`.
    public func requestRefund(
        headers: Operations.requestRefund.Input.Headers,
        body: Components.RequestBodies.requestRefund
    ) async throws -> Operations.requestRefund.Output {
        try await requestRefund(Operations.requestRefund.Input(headers: headers, body: body))
    }
    /// This method returns a list of purchases made by a specific user.
    ///
    /// - Remark: HTTP `GET /purchases`.
    /// - Remark: Generated from `#/paths//purchases/get(getPurchases)`.
    public func getPurchases(
        query: Operations.getPurchases.Input.Query = .init(),
        headers: Operations.getPurchases.Input.Headers
    ) async throws -> Operations.getPurchases.Output {
        try await getPurchases(Operations.getPurchases.Input(query: query, headers: headers))
    }
    /// This method returns a list of transactions made by a specific user.
    ///
    /// - Remark: HTTP `GET /transactions`.
    /// - Remark: Generated from `#/paths//transactions/get(getTransactions)`.
    public func getTransactions(
        query: Operations.getTransactions.Input.Query = .init(),
        headers: Operations.getTransactions.Input.Headers
    ) async throws -> Operations.getTransactions.Output {
        try await getTransactions(Operations.getTransactions.Input(query: query, headers: headers))
    }
    /// - Remark: HTTP `POST /gasless/estimate-cost/{jetton_master}`.
    /// - Remark: Generated from `#/paths//gasless/estimate-cost/{jetton_master}/post(estimateGaslessCost)`.
    public func estimateGaslessCost(
        path: Operations.estimateGaslessCost.Input.Path,
        query: Operations.estimateGaslessCost.Input.Query = .init(),
        headers: Operations.estimateGaslessCost.Input.Headers = .init(),
        body: Components.RequestBodies.gaslessEstimateCost
    ) async throws -> Operations.estimateGaslessCost.Output {
        try await estimateGaslessCost(
            Operations.estimateGaslessCost.Input(path: path, query: query, headers: headers, body: body)
        )
    }
    /// - Remark: HTTP `POST /restricted/create-custom-refund`.
    /// - Remark: Generated from `#/paths//restricted/create-custom-refund/post(createCustomRefund)`.
    public func createCustomRefund(
        query: Operations.createCustomRefund.Input.Query,
        headers: Operations.createCustomRefund.Input.Headers = .init(),
        body: Components.RequestBodies.customRefund
    ) async throws -> Operations.createCustomRefund.Output {
        try await createCustomRefund(Operations.createCustomRefund.Input(query: query, headers: headers, body: body))
    }
    /// - Remark: HTTP `POST /restricted/purchases/{purchase_id}/extend-refund-period`.
    /// - Remark: Generated from `#/paths//restricted/purchases/{purchase_id}/extend-refund-period/post(extendRefundPeriod)`.
    public func extendRefundPeriod(
        path: Operations.extendRefundPeriod.Input.Path,
        query: Operations.extendRefundPeriod.Input.Query,
        headers: Operations.extendRefundPeriod.Input.Headers = .init()
    ) async throws -> Operations.extendRefundPeriod.Output {
        try await extendRefundPeriod(Operations.extendRefundPeriod.Input(path: path, query: query, headers: headers))
    }
}
/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(validatingOpenAPIServerURL: "https://battery.tonkeeper.com")
    }
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(validatingOpenAPIServerURL: "https://testnet-battery.tonkeeper.com")
    }
}
/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/error`.
            public var error: Swift.String
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - error:
            public init(error: Swift.String) { self.error = error }
            public enum CodingKeys: String, CodingKey { case error }
        }
        /// - Remark: Generated from `#/components/schemas/Status`.
        public struct Status: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Status/pending_transactionsPayload`.
            public struct pending_transactionsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Status/pending_transactionsPayload/id`.
                public var id: Swift.String
                /// Creates a new `pending_transactionsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) { self.id = id }
                public enum CodingKeys: String, CodingKey { case id }
            }
            /// - Remark: Generated from `#/components/schemas/Status/pending_transactions`.
            public typealias pending_transactionsPayload = [Components.Schemas.Status
                .pending_transactionsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/Status/pending_transactions`.
            public var pending_transactions: Components.Schemas.Status.pending_transactionsPayload
            /// Creates a new `Status`.
            ///
            /// - Parameters:
            ///   - pending_transactions:
            public init(pending_transactions: Components.Schemas.Status.pending_transactionsPayload) {
                self.pending_transactions = pending_transactions
            }
            public enum CodingKeys: String, CodingKey { case pending_transactions }
        }
        /// - Remark: Generated from `#/components/schemas/Config`.
        public struct Config: Codable, Hashable, Sendable {
            /// with zero balance it is possible to transfer some jettons (stablecoins, jusdt, etc) to this address to refill the balance. Such transfers would be paid by Battery Service.
            ///
            /// - Remark: Generated from `#/components/schemas/Config/fund_receiver`.
            public var fund_receiver: Swift.String
            /// when building a message to transfer an NFT or Jetton, use this address to send excess funds back to Battery Service.
            ///
            /// - Remark: Generated from `#/components/schemas/Config/excess_account`.
            public var excess_account: Swift.String
            /// Creates a new `Config`.
            ///
            /// - Parameters:
            ///   - fund_receiver: with zero balance it is possible to transfer some jettons (stablecoins, jusdt, etc) to this address to refill the balance. Such transfers would be paid by Battery Service.
            ///   - excess_account: when building a message to transfer an NFT or Jetton, use this address to send excess funds back to Battery Service.
            public init(fund_receiver: Swift.String, excess_account: Swift.String) {
                self.fund_receiver = fund_receiver
                self.excess_account = excess_account
            }
            public enum CodingKeys: String, CodingKey {
                case fund_receiver
                case excess_account
            }
        }
        /// - Remark: Generated from `#/components/schemas/GaslessEstimation`.
        public struct GaslessEstimation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GaslessEstimation/commission`.
            public var commission: Swift.String
            /// Creates a new `GaslessEstimation`.
            ///
            /// - Parameters:
            ///   - commission:
            public init(commission: Swift.String) { self.commission = commission }
            public enum CodingKeys: String, CodingKey { case commission }
        }
        /// - Remark: Generated from `#/components/schemas/Balance`.
        public struct Balance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Balance/balance`.
            public var balance: Swift.String
            /// reserved amount in units (TON/USD)
            ///
            /// - Remark: Generated from `#/components/schemas/Balance/reserved`.
            public var reserved: Swift.String
            /// - Remark: Generated from `#/components/schemas/Balance/units`.
            @frozen public enum unitsPayload: String, Codable, Hashable, Sendable {
                case usd = "usd"
                case ton = "ton"
            }
            /// - Remark: Generated from `#/components/schemas/Balance/units`.
            public var units: Components.Schemas.Balance.unitsPayload
            /// Creates a new `Balance`.
            ///
            /// - Parameters:
            ///   - balance:
            ///   - reserved: reserved amount in units (TON/USD)
            ///   - units:
            public init(balance: Swift.String, reserved: Swift.String, units: Components.Schemas.Balance.unitsPayload) {
                self.balance = balance
                self.reserved = reserved
                self.units = units
            }
            public enum CodingKeys: String, CodingKey {
                case balance
                case reserved
                case units
            }
        }
        /// - Remark: Generated from `#/components/schemas/RechargeMethods`.
        public struct RechargeMethods: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload`.
            public struct methodsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/image`.
                public var image: Swift.String?
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/jetton_master`.
                public var jetton_master: Swift.String?
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/min_bootstrap_value`.
                public var min_bootstrap_value: Swift.String?
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case jetton = "jetton"
                    case ton = "ton"
                }
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/type`.
                public var _type: Components.Schemas.RechargeMethods.methodsPayloadPayload._typePayload
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/rate`.
                public var rate: Swift.String
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/symbol`.
                public var symbol: Swift.String
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/decimals`.
                public var decimals: Swift.Int
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/support_gasless`.
                public var support_gasless: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/RechargeMethods/methodsPayload/support_recharge`.
                public var support_recharge: Swift.Bool
                /// Creates a new `methodsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - image:
                ///   - jetton_master:
                ///   - min_bootstrap_value:
                ///   - _type:
                ///   - rate:
                ///   - symbol:
                ///   - decimals:
                ///   - support_gasless:
                ///   - support_recharge:
                public init(
                    image: Swift.String? = nil,
                    jetton_master: Swift.String? = nil,
                    min_bootstrap_value: Swift.String? = nil,
                    _type: Components.Schemas.RechargeMethods.methodsPayloadPayload._typePayload,
                    rate: Swift.String,
                    symbol: Swift.String,
                    decimals: Swift.Int,
                    support_gasless: Swift.Bool,
                    support_recharge: Swift.Bool
                ) {
                    self.image = image
                    self.jetton_master = jetton_master
                    self.min_bootstrap_value = min_bootstrap_value
                    self._type = _type
                    self.rate = rate
                    self.symbol = symbol
                    self.decimals = decimals
                    self.support_gasless = support_gasless
                    self.support_recharge = support_recharge
                }
                public enum CodingKeys: String, CodingKey {
                    case image
                    case jetton_master
                    case min_bootstrap_value
                    case _type = "type"
                    case rate
                    case symbol
                    case decimals
                    case support_gasless
                    case support_recharge
                }
            }
            /// - Remark: Generated from `#/components/schemas/RechargeMethods/methods`.
            public typealias methodsPayload = [Components.Schemas.RechargeMethods.methodsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/RechargeMethods/methods`.
            public var methods: Components.Schemas.RechargeMethods.methodsPayload
            /// Creates a new `RechargeMethods`.
            ///
            /// - Parameters:
            ///   - methods:
            public init(methods: Components.Schemas.RechargeMethods.methodsPayload) { self.methods = methods }
            public enum CodingKeys: String, CodingKey { case methods }
        }
        /// - Remark: Generated from `#/components/schemas/Purchases`.
        public struct Purchases: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Purchases/total_purchases`.
            public var total_purchases: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload`.
            public struct purchasesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/for_account_id`.
                public var for_account_id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/user_purchase_id`.
                @available(*, deprecated) public var user_purchase_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/purchase_id`.
                public var purchase_id: Swift.Int
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case android = "android"
                    case ios = "ios"
                    case promo_hyphen_code = "promo-code"
                    case crypto = "crypto"
                    case gift = "gift"
                    case on_hyphen_the_hyphen_way_hyphen_gift = "on-the-way-gift"
                }
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/type`.
                public var _type: Components.Schemas.Purchases.purchasesPayloadPayload._typePayload
                /// Amount describes the amount paid by the user for this purchase when we know it. For crypto purchases it is always set.
                ///
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/amount`.
                public var amount: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/charges`.
                public var charges: Swift.Int
                /// Currency is set when we know it. For crypto purchases it is always set.
                ///
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/currency`.
                public var currency: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/datetime`.
                public var datetime: Swift.String
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information`.
                public struct refund_informationPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/fully_refunded`.
                    public var fully_refunded: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/partially_refunded`.
                    public var partially_refunded: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/pending_refund`.
                    public var pending_refund: Swift.Bool
                    /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/refunded`.
                    public struct refundedPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/refunded/amount`.
                        public var amount: Swift.String
                        /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/refunded/charges`.
                        public var charges: Swift.Int
                        /// Creates a new `refundedPayload`.
                        ///
                        /// - Parameters:
                        ///   - amount:
                        ///   - charges:
                        public init(amount: Swift.String, charges: Swift.Int) {
                            self.amount = amount
                            self.charges = charges
                        }
                        public enum CodingKeys: String, CodingKey {
                            case amount
                            case charges
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/refunded`.
                    public var refunded:
                        Components.Schemas.Purchases.purchasesPayloadPayload.refund_informationPayload.refundedPayload?
                    /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/refundable`.
                    public struct refundablePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/refundable/amount`.
                        public var amount: Swift.String
                        /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/refundable/charges`.
                        public var charges: Swift.Int
                        /// Creates a new `refundablePayload`.
                        ///
                        /// - Parameters:
                        ///   - amount:
                        ///   - charges:
                        public init(amount: Swift.String, charges: Swift.Int) {
                            self.amount = amount
                            self.charges = charges
                        }
                        public enum CodingKeys: String, CodingKey {
                            case amount
                            case charges
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information/refundable`.
                    public var refundable:
                        Components.Schemas.Purchases.purchasesPayloadPayload.refund_informationPayload
                            .refundablePayload?
                    /// Creates a new `refund_informationPayload`.
                    ///
                    /// - Parameters:
                    ///   - fully_refunded:
                    ///   - partially_refunded:
                    ///   - pending_refund:
                    ///   - refunded:
                    ///   - refundable:
                    public init(
                        fully_refunded: Swift.Bool,
                        partially_refunded: Swift.Bool,
                        pending_refund: Swift.Bool,
                        refunded: Components.Schemas.Purchases.purchasesPayloadPayload.refund_informationPayload
                            .refundedPayload? = nil,
                        refundable: Components.Schemas.Purchases.purchasesPayloadPayload.refund_informationPayload
                            .refundablePayload? = nil
                    ) {
                        self.fully_refunded = fully_refunded
                        self.partially_refunded = partially_refunded
                        self.pending_refund = pending_refund
                        self.refunded = refunded
                        self.refundable = refundable
                    }
                    public enum CodingKeys: String, CodingKey {
                        case fully_refunded
                        case partially_refunded
                        case pending_refund
                        case refunded
                        case refundable
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Purchases/purchasesPayload/refund_information`.
                public var refund_information:
                    Components.Schemas.Purchases.purchasesPayloadPayload.refund_informationPayload?
                /// Creates a new `purchasesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - for_account_id:
                ///   - user_purchase_id:
                ///   - purchase_id:
                ///   - _type:
                ///   - amount: Amount describes the amount paid by the user for this purchase when we know it. For crypto purchases it is always set.
                ///   - charges:
                ///   - currency: Currency is set when we know it. For crypto purchases it is always set.
                ///   - datetime:
                ///   - refund_information:
                public init(
                    for_account_id: Swift.String? = nil,
                    user_purchase_id: Swift.Int,
                    purchase_id: Swift.Int,
                    _type: Components.Schemas.Purchases.purchasesPayloadPayload._typePayload,
                    amount: Swift.String? = nil,
                    charges: Swift.Int,
                    currency: Swift.String? = nil,
                    datetime: Swift.String,
                    refund_information: Components.Schemas.Purchases.purchasesPayloadPayload
                        .refund_informationPayload? = nil
                ) {
                    self.for_account_id = for_account_id
                    self.user_purchase_id = user_purchase_id
                    self.purchase_id = purchase_id
                    self._type = _type
                    self.amount = amount
                    self.charges = charges
                    self.currency = currency
                    self.datetime = datetime
                    self.refund_information = refund_information
                }
                public enum CodingKeys: String, CodingKey {
                    case for_account_id
                    case user_purchase_id
                    case purchase_id
                    case _type = "type"
                    case amount
                    case charges
                    case currency
                    case datetime
                    case refund_information
                }
            }
            /// - Remark: Generated from `#/components/schemas/Purchases/purchases`.
            public typealias purchasesPayload = [Components.Schemas.Purchases.purchasesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/Purchases/purchases`.
            public var purchases: Components.Schemas.Purchases.purchasesPayload
            /// Creates a new `Purchases`.
            ///
            /// - Parameters:
            ///   - total_purchases:
            ///   - purchases:
            public init(total_purchases: Swift.Int, purchases: Components.Schemas.Purchases.purchasesPayload) {
                self.total_purchases = total_purchases
                self.purchases = purchases
            }
            public enum CodingKeys: String, CodingKey {
                case total_purchases
                case purchases
            }
        }
        /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus`.
        public struct AndroidBatteryPurchaseStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchasesPayload`.
            public struct purchasesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchasesPayload/product_id`.
                public var product_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchasesPayload/token`.
                public var token: Swift.String
                /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchasesPayload/success`.
                public var success: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchasesPayload/error`.
                public struct errorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchasesPayload/error/msg`.
                    public var msg: Swift.String
                    /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchasesPayload/error/code`.
                    @frozen public enum codePayload: String, Codable, Hashable, Sendable {
                        case invalid_hyphen_product_hyphen_id = "invalid-product-id"
                        case user_hyphen_not_hyphen_found = "user-not-found"
                        case purchase_hyphen_is_hyphen_already_hyphen_used = "purchase-is-already-used"
                        case temporary_hyphen_error = "temporary-error"
                        case unknown = "unknown"
                    }
                    /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchasesPayload/error/code`.
                    public var code:
                        Components.Schemas.AndroidBatteryPurchaseStatus.purchasesPayloadPayload.errorPayload.codePayload
                    /// Creates a new `errorPayload`.
                    ///
                    /// - Parameters:
                    ///   - msg:
                    ///   - code:
                    public init(
                        msg: Swift.String,
                        code: Components.Schemas.AndroidBatteryPurchaseStatus.purchasesPayloadPayload.errorPayload
                            .codePayload
                    ) {
                        self.msg = msg
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case msg
                        case code
                    }
                }
                /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchasesPayload/error`.
                public var error: Components.Schemas.AndroidBatteryPurchaseStatus.purchasesPayloadPayload.errorPayload?
                /// Creates a new `purchasesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - product_id:
                ///   - token:
                ///   - success:
                ///   - error:
                public init(
                    product_id: Swift.String,
                    token: Swift.String,
                    success: Swift.Bool,
                    error: Components.Schemas.AndroidBatteryPurchaseStatus.purchasesPayloadPayload.errorPayload? = nil
                ) {
                    self.product_id = product_id
                    self.token = token
                    self.success = success
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case product_id
                    case token
                    case success
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchases`.
            public typealias purchasesPayload = [Components.Schemas.AndroidBatteryPurchaseStatus
                .purchasesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/AndroidBatteryPurchaseStatus/purchases`.
            public var purchases: Components.Schemas.AndroidBatteryPurchaseStatus.purchasesPayload
            /// Creates a new `AndroidBatteryPurchaseStatus`.
            ///
            /// - Parameters:
            ///   - purchases:
            public init(purchases: Components.Schemas.AndroidBatteryPurchaseStatus.purchasesPayload) {
                self.purchases = purchases
            }
            public enum CodingKeys: String, CodingKey { case purchases }
        }
        /// - Remark: Generated from `#/components/schemas/appStoreResponse`.
        public typealias appStoreResponse = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus`.
        public struct iOSBatteryPurchaseStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactionsPayload`.
            public struct transactionsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactionsPayload/transaction_id`.
                public var transaction_id: Swift.String
                /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactionsPayload/success`.
                public var success: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactionsPayload/error`.
                public struct errorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactionsPayload/error/msg`.
                    public var msg: Swift.String
                    /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactionsPayload/error/code`.
                    @frozen public enum codePayload: String, Codable, Hashable, Sendable {
                        case invalid_hyphen_bundle_hyphen_id = "invalid-bundle-id"
                        case invalid_hyphen_product_hyphen_id = "invalid-product-id"
                        case user_hyphen_not_hyphen_found = "user-not-found"
                        case purchase_hyphen_is_hyphen_already_hyphen_used = "purchase-is-already-used"
                        case temporary_hyphen_error = "temporary-error"
                        case unknown = "unknown"
                    }
                    /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactionsPayload/error/code`.
                    public var code:
                        Components.Schemas.iOSBatteryPurchaseStatus.transactionsPayloadPayload.errorPayload.codePayload
                    /// Creates a new `errorPayload`.
                    ///
                    /// - Parameters:
                    ///   - msg:
                    ///   - code:
                    public init(
                        msg: Swift.String,
                        code: Components.Schemas.iOSBatteryPurchaseStatus.transactionsPayloadPayload.errorPayload
                            .codePayload
                    ) {
                        self.msg = msg
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case msg
                        case code
                    }
                }
                /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactionsPayload/error`.
                public var error: Components.Schemas.iOSBatteryPurchaseStatus.transactionsPayloadPayload.errorPayload?
                /// Creates a new `transactionsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - transaction_id:
                ///   - success:
                ///   - error:
                public init(
                    transaction_id: Swift.String,
                    success: Swift.Bool,
                    error: Components.Schemas.iOSBatteryPurchaseStatus.transactionsPayloadPayload.errorPayload? = nil
                ) {
                    self.transaction_id = transaction_id
                    self.success = success
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case transaction_id
                    case success
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactions`.
            public typealias transactionsPayload = [Components.Schemas.iOSBatteryPurchaseStatus
                .transactionsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/iOSBatteryPurchaseStatus/transactions`.
            public var transactions: Components.Schemas.iOSBatteryPurchaseStatus.transactionsPayload
            /// Creates a new `iOSBatteryPurchaseStatus`.
            ///
            /// - Parameters:
            ///   - transactions:
            public init(transactions: Components.Schemas.iOSBatteryPurchaseStatus.transactionsPayload) {
                self.transactions = transactions
            }
            public enum CodingKeys: String, CodingKey { case transactions }
        }
        /// - Remark: Generated from `#/components/schemas/promoCodeBatteryPurchaseStatus`.
        public struct promoCodeBatteryPurchaseStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/promoCodeBatteryPurchaseStatus/balance_change`.
            public var balance_change: Swift.String
            /// - Remark: Generated from `#/components/schemas/promoCodeBatteryPurchaseStatus/success`.
            public var success: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/promoCodeBatteryPurchaseStatus/error`.
            public struct errorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/promoCodeBatteryPurchaseStatus/error/msg`.
                public var msg: Swift.String
                /// - Remark: Generated from `#/components/schemas/promoCodeBatteryPurchaseStatus/error/code`.
                @frozen public enum codePayload: String, Codable, Hashable, Sendable {
                    case promo_hyphen_code_hyphen_not_hyphen_found = "promo-code-not-found"
                    case promo_hyphen_exceeded_hyphen_attempts = "promo-exceeded-attempts"
                    case temporary_hyphen_error = "temporary-error"
                }
                /// - Remark: Generated from `#/components/schemas/promoCodeBatteryPurchaseStatus/error/code`.
                public var code: Components.Schemas.promoCodeBatteryPurchaseStatus.errorPayload.codePayload
                /// Creates a new `errorPayload`.
                ///
                /// - Parameters:
                ///   - msg:
                ///   - code:
                public init(
                    msg: Swift.String,
                    code: Components.Schemas.promoCodeBatteryPurchaseStatus.errorPayload.codePayload
                ) {
                    self.msg = msg
                    self.code = code
                }
                public enum CodingKeys: String, CodingKey {
                    case msg
                    case code
                }
            }
            /// - Remark: Generated from `#/components/schemas/promoCodeBatteryPurchaseStatus/error`.
            public var error: Components.Schemas.promoCodeBatteryPurchaseStatus.errorPayload?
            /// Creates a new `promoCodeBatteryPurchaseStatus`.
            ///
            /// - Parameters:
            ///   - balance_change:
            ///   - success:
            ///   - error:
            public init(
                balance_change: Swift.String,
                success: Swift.Bool,
                error: Components.Schemas.promoCodeBatteryPurchaseStatus.errorPayload? = nil
            ) {
                self.balance_change = balance_change
                self.success = success
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case balance_change
                case success
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/Transactions`.
        public struct Transactions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Transactions/total_transactions`.
            public var total_transactions: Swift.Int
            /// if set, then there are more transactions to be loaded. Use this value as offset parameter in the next request.
            ///
            /// - Remark: Generated from `#/components/schemas/Transactions/next_offset`.
            public var next_offset: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Transactions/transactionsPayload`.
            public struct transactionsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Transactions/transactionsPayload/id`.
                public var id: Swift.String
                /// represents the amount of money paid by the user for this transaction.
                ///
                /// - Remark: Generated from `#/components/schemas/Transactions/transactionsPayload/paid_amount`.
                public var paid_amount: Swift.String
                /// - Remark: Generated from `#/components/schemas/Transactions/transactionsPayload/status`.
                @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                    case pending = "pending"
                    case completed = "completed"
                    case failed = "failed"
                }
                /// - Remark: Generated from `#/components/schemas/Transactions/transactionsPayload/status`.
                public var status: Components.Schemas.Transactions.transactionsPayloadPayload.statusPayload
                /// - Remark: Generated from `#/components/schemas/Transactions/transactionsPayload/created_at`.
                public var created_at: Swift.String
                /// Creates a new `transactionsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - paid_amount: represents the amount of money paid by the user for this transaction.
                ///   - status:
                ///   - created_at:
                public init(
                    id: Swift.String,
                    paid_amount: Swift.String,
                    status: Components.Schemas.Transactions.transactionsPayloadPayload.statusPayload,
                    created_at: Swift.String
                ) {
                    self.id = id
                    self.paid_amount = paid_amount
                    self.status = status
                    self.created_at = created_at
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case paid_amount
                    case status
                    case created_at
                }
            }
            /// - Remark: Generated from `#/components/schemas/Transactions/transactions`.
            public typealias transactionsPayload = [Components.Schemas.Transactions.transactionsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/Transactions/transactions`.
            public var transactions: Components.Schemas.Transactions.transactionsPayload
            /// Creates a new `Transactions`.
            ///
            /// - Parameters:
            ///   - total_transactions:
            ///   - next_offset: if set, then there are more transactions to be loaded. Use this value as offset parameter in the next request.
            ///   - transactions:
            public init(
                total_transactions: Swift.Int,
                next_offset: Swift.Int? = nil,
                transactions: Components.Schemas.Transactions.transactionsPayload
            ) {
                self.total_transactions = total_transactions
                self.next_offset = next_offset
                self.transactions = transactions
            }
            public enum CodingKeys: String, CodingKey {
                case total_transactions
                case next_offset
                case transactions
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// - Remark: Generated from `#/components/parameters/token`.
        public typealias token = Swift.String
        /// - Remark: Generated from `#/components/parameters/optionalToken`.
        public typealias optionalToken = Swift.String
        /// - Remark: Generated from `#/components/parameters/adminToken`.
        public typealias adminToken = Swift.String
        /// - Remark: Generated from `#/components/parameters/jettonMasterParameter`.
        public typealias jettonMasterParameter = Swift.String
        /// - Remark: Generated from `#/components/parameters/purchaseId`.
        public typealias purchaseId = Swift.Int
        /// - Remark: Generated from `#/components/parameters/limitQuery`.
        public typealias limitQuery = Swift.Int
        /// - Remark: Generated from `#/components/parameters/offsetQuery`.
        public typealias offsetQuery = Swift.Int
        /// - Remark: Generated from `#/components/parameters/i18n`.
        public typealias i18n = Swift.String
        /// - Remark: Generated from `#/components/parameters/balanceUnits`.
        @frozen public enum balanceUnits: String, Codable, Hashable, Sendable {
            case usd = "usd"
            case ton = "ton"
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {
        /// - Remark: Generated from `#/components/requestBodies/TonConnectProof`.
        @frozen public enum TonConnectProof: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/address`.
                public var address: Swift.String
                /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof`.
                public struct proofPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/timestamp`.
                    public var timestamp: Swift.Int64
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/domain`.
                    public struct domainPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/domain/length_bytes`.
                        public var length_bytes: Swift.Int32?
                        /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/domain/value`.
                        public var value: Swift.String
                        /// Creates a new `domainPayload`.
                        ///
                        /// - Parameters:
                        ///   - length_bytes:
                        ///   - value:
                        public init(length_bytes: Swift.Int32? = nil, value: Swift.String) {
                            self.length_bytes = length_bytes
                            self.value = value
                        }
                        public enum CodingKeys: String, CodingKey {
                            case length_bytes
                            case value
                        }
                    }
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/domain`.
                    public var domain: Components.RequestBodies.TonConnectProof.jsonPayload.proofPayload.domainPayload
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/signature`.
                    public var signature: Swift.String
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/payload`.
                    public var payload: Swift.String
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/state_init`.
                    public var state_init: Swift.String?
                    /// Creates a new `proofPayload`.
                    ///
                    /// - Parameters:
                    ///   - timestamp:
                    ///   - domain:
                    ///   - signature:
                    ///   - payload:
                    ///   - state_init:
                    public init(
                        timestamp: Swift.Int64,
                        domain: Components.RequestBodies.TonConnectProof.jsonPayload.proofPayload.domainPayload,
                        signature: Swift.String,
                        payload: Swift.String,
                        state_init: Swift.String? = nil
                    ) {
                        self.timestamp = timestamp
                        self.domain = domain
                        self.signature = signature
                        self.payload = payload
                        self.state_init = state_init
                    }
                    public enum CodingKeys: String, CodingKey {
                        case timestamp
                        case domain
                        case signature
                        case payload
                        case state_init
                    }
                }
                /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof`.
                public var proof: Components.RequestBodies.TonConnectProof.jsonPayload.proofPayload
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - address:
                ///   - proof:
                public init(
                    address: Swift.String,
                    proof: Components.RequestBodies.TonConnectProof.jsonPayload.proofPayload
                ) {
                    self.address = address
                    self.proof = proof
                }
                public enum CodingKeys: String, CodingKey {
                    case address
                    case proof
                }
            }
            /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/content/application\/json`.
            case json(Components.RequestBodies.TonConnectProof.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/Boc`.
        @frozen public enum Boc: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/Boc/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/Boc/json/boc`.
                public var boc: Swift.String
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - boc:
                public init(boc: Swift.String) { self.boc = boc }
                public enum CodingKeys: String, CodingKey { case boc }
            }
            /// - Remark: Generated from `#/components/requestBodies/Boc/content/application\/json`.
            case json(Components.RequestBodies.Boc.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/AndroidBatteryPurchase`.
        @frozen public enum AndroidBatteryPurchase: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/AndroidBatteryPurchase/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/AndroidBatteryPurchase/json/purchasesPayload`.
                public struct purchasesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/requestBodies/AndroidBatteryPurchase/json/purchasesPayload/token`.
                    public var token: Swift.String
                    /// - Remark: Generated from `#/components/requestBodies/AndroidBatteryPurchase/json/purchasesPayload/product_id`.
                    public var product_id: Swift.String
                    /// Creates a new `purchasesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - token:
                    ///   - product_id:
                    public init(token: Swift.String, product_id: Swift.String) {
                        self.token = token
                        self.product_id = product_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case token
                        case product_id
                    }
                }
                /// - Remark: Generated from `#/components/requestBodies/AndroidBatteryPurchase/json/purchases`.
                public typealias purchasesPayload = [Components.RequestBodies.AndroidBatteryPurchase.jsonPayload
                    .purchasesPayloadPayload]
                /// - Remark: Generated from `#/components/requestBodies/AndroidBatteryPurchase/json/purchases`.
                public var purchases: Components.RequestBodies.AndroidBatteryPurchase.jsonPayload.purchasesPayload
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - purchases:
                public init(purchases: Components.RequestBodies.AndroidBatteryPurchase.jsonPayload.purchasesPayload) {
                    self.purchases = purchases
                }
                public enum CodingKeys: String, CodingKey { case purchases }
            }
            /// - Remark: Generated from `#/components/requestBodies/AndroidBatteryPurchase/content/application\/json`.
            case json(Components.RequestBodies.AndroidBatteryPurchase.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/appStoreNotification`.
        @frozen public enum appStoreNotification: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/appStoreNotification/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/appStoreNotification/json/signedPayload`.
                public var signedPayload: Swift.String
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - signedPayload:
                public init(signedPayload: Swift.String) { self.signedPayload = signedPayload }
                public enum CodingKeys: String, CodingKey { case signedPayload }
            }
            /// - Remark: Generated from `#/components/requestBodies/appStoreNotification/content/application\/json`.
            case json(Components.RequestBodies.appStoreNotification.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/iOSBatteryPurchase`.
        @frozen public enum iOSBatteryPurchase: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/iOSBatteryPurchase/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/iOSBatteryPurchase/json/transactionsPayload`.
                public struct transactionsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/requestBodies/iOSBatteryPurchase/json/transactionsPayload/id`.
                    public var id: Swift.String
                    /// Creates a new `transactionsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    public init(id: Swift.String) { self.id = id }
                    public enum CodingKeys: String, CodingKey { case id }
                }
                /// - Remark: Generated from `#/components/requestBodies/iOSBatteryPurchase/json/transactions`.
                public typealias transactionsPayload = [Components.RequestBodies.iOSBatteryPurchase.jsonPayload
                    .transactionsPayloadPayload]
                /// - Remark: Generated from `#/components/requestBodies/iOSBatteryPurchase/json/transactions`.
                public var transactions: Components.RequestBodies.iOSBatteryPurchase.jsonPayload.transactionsPayload
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - transactions:
                public init(transactions: Components.RequestBodies.iOSBatteryPurchase.jsonPayload.transactionsPayload) {
                    self.transactions = transactions
                }
                public enum CodingKeys: String, CodingKey { case transactions }
            }
            /// - Remark: Generated from `#/components/requestBodies/iOSBatteryPurchase/content/application\/json`.
            case json(Components.RequestBodies.iOSBatteryPurchase.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/gaslessEstimateCost`.
        @frozen public enum gaslessEstimateCost: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/gaslessEstimateCost/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/gaslessEstimateCost/json/battery`.
                public var battery: Swift.Bool?
                /// - Remark: Generated from `#/components/requestBodies/gaslessEstimateCost/json/payload`.
                public var payload: Swift.String
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - battery:
                ///   - payload:
                public init(battery: Swift.Bool? = nil, payload: Swift.String) {
                    self.battery = battery
                    self.payload = payload
                }
                public enum CodingKeys: String, CodingKey {
                    case battery
                    case payload
                }
            }
            /// - Remark: Generated from `#/components/requestBodies/gaslessEstimateCost/content/application\/json`.
            case json(Components.RequestBodies.gaslessEstimateCost.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/confirmLargeRefund`.
        @frozen public enum confirmLargeRefund: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/confirmLargeRefund/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/confirmLargeRefund/json/purchase_id`.
                public var purchase_id: Swift.Int
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - purchase_id:
                public init(purchase_id: Swift.Int) { self.purchase_id = purchase_id }
                public enum CodingKeys: String, CodingKey { case purchase_id }
            }
            /// - Remark: Generated from `#/components/requestBodies/confirmLargeRefund/content/application\/json`.
            case json(Components.RequestBodies.confirmLargeRefund.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/customRefund`.
        @frozen public enum customRefund: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/customRefund/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/customRefund/json/relayer_event_id`.
                public var relayer_event_id: Swift.Int?
                /// - Remark: Generated from `#/components/requestBodies/customRefund/json/amount`.
                public var amount: Swift.String
                /// - Remark: Generated from `#/components/requestBodies/customRefund/json/currency`.
                public var currency: Swift.String
                /// - Remark: Generated from `#/components/requestBodies/customRefund/json/comment`.
                public var comment: Swift.String
                /// - Remark: Generated from `#/components/requestBodies/customRefund/json/reason`.
                public var reason: Swift.String
                /// - Remark: Generated from `#/components/requestBodies/customRefund/json/destination`.
                public var destination: Swift.String
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - relayer_event_id:
                ///   - amount:
                ///   - currency:
                ///   - comment:
                ///   - reason:
                ///   - destination:
                public init(
                    relayer_event_id: Swift.Int? = nil,
                    amount: Swift.String,
                    currency: Swift.String,
                    comment: Swift.String,
                    reason: Swift.String,
                    destination: Swift.String
                ) {
                    self.relayer_event_id = relayer_event_id
                    self.amount = amount
                    self.currency = currency
                    self.comment = comment
                    self.reason = reason
                    self.destination = destination
                }
                public enum CodingKeys: String, CodingKey {
                    case relayer_event_id
                    case amount
                    case currency
                    case comment
                    case reason
                    case destination
                }
            }
            /// - Remark: Generated from `#/components/requestBodies/customRefund/content/application\/json`.
            case json(Components.RequestBodies.customRefund.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/requestRefund`.
        @frozen public enum requestRefund: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/requestRefund/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/requestRefund/json/user_purchase_id`.
                @available(*, deprecated) public var user_purchase_id: Swift.Int?
                /// - Remark: Generated from `#/components/requestBodies/requestRefund/json/purchase_id`.
                public var purchase_id: Swift.Int?
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - user_purchase_id:
                ///   - purchase_id:
                public init(user_purchase_id: Swift.Int? = nil, purchase_id: Swift.Int? = nil) {
                    self.user_purchase_id = user_purchase_id
                    self.purchase_id = purchase_id
                }
                public enum CodingKeys: String, CodingKey {
                    case user_purchase_id
                    case purchase_id
                }
            }
            /// - Remark: Generated from `#/components/requestBodies/requestRefund/content/application\/json`.
            case json(Components.RequestBodies.requestRefund.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/promoCodeBatteryPurchase`.
        @frozen public enum promoCodeBatteryPurchase: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/promoCodeBatteryPurchase/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/promoCodeBatteryPurchase/json/promo_code`.
                public var promo_code: Swift.String
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - promo_code:
                public init(promo_code: Swift.String) { self.promo_code = promo_code }
                public enum CodingKeys: String, CodingKey { case promo_code }
            }
            /// - Remark: Generated from `#/components/requestBodies/promoCodeBatteryPurchase/content/application\/json`.
            case json(Components.RequestBodies.promoCodeBatteryPurchase.jsonPayload)
        }
    }
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct _Error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Error/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Error/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/Error/content/json/error`.
                    public var error: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - error:
                    public init(error: Swift.String) { self.error = error }
                    public enum CodingKeys: String, CodingKey { case error }
                }
                /// - Remark: Generated from `#/components/responses/Error/content/application\/json`.
                case json(Components.Responses._Error.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses._Error.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body): return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses._Error.Body
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses._Error.Body) { self.body = body }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get a payload for further token receipt
    ///
    /// - Remark: HTTP `GET /tonconnect/payload`.
    /// - Remark: Generated from `#/paths//tonconnect/payload/get(getTonConnectPayload)`.
    public enum getTonConnectPayload {
        public static let id: Swift.String = "getTonConnectPayload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tonconnect/payload/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTonConnectPayload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getTonConnectPayload.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getTonConnectPayload.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getTonConnectPayload.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tonconnect/payload/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tonconnect/payload/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/tonconnect/payload/GET/responses/200/content/json/payload`.
                        public var payload: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - payload:
                        public init(payload: Swift.String) { self.payload = payload }
                        public enum CodingKeys: String, CodingKey { case payload }
                    }
                    /// - Remark: Generated from `#/paths/tonconnect/payload/GET/responses/200/content/application\/json`.
                    case json(Operations.getTonConnectPayload.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getTonConnectPayload.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getTonConnectPayload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getTonConnectPayload.Output.Ok.Body) { self.body = body }
            }
            /// payload
            ///
            /// - Remark: Generated from `#/paths//tonconnect/payload/get(getTonConnectPayload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getTonConnectPayload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getTonConnectPayload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//tonconnect/payload/get(getTonConnectPayload)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Account verification and token issuance
    ///
    /// - Remark: HTTP `POST /tonconnect/proof`.
    /// - Remark: Generated from `#/paths//tonconnect/proof/post(tonConnectProof)`.
    public enum tonConnectProof {
        public static let id: Swift.String = "tonConnectProof"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tonconnect/proof/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.tonConnectProof.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tonConnectProof.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.tonConnectProof.Input.Headers
            public var body: Components.RequestBodies.TonConnectProof
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.tonConnectProof.Input.Headers = .init(),
                body: Components.RequestBodies.TonConnectProof
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tonconnect/proof/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tonconnect/proof/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/tonconnect/proof/POST/responses/200/content/json/token`.
                        public var token: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - token:
                        public init(token: Swift.String) { self.token = token }
                        public enum CodingKeys: String, CodingKey { case token }
                    }
                    /// - Remark: Generated from `#/paths/tonconnect/proof/POST/responses/200/content/application\/json`.
                    case json(Operations.tonConnectProof.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.tonConnectProof.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tonConnectProof.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tonConnectProof.Output.Ok.Body) { self.body = body }
            }
            /// auth token
            ///
            /// - Remark: Generated from `#/paths//tonconnect/proof/post(tonConnectProof)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tonConnectProof.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tonConnectProof.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//tonconnect/proof/post(tonConnectProof)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// This method returns information about the current status of Battery Service.
    ///
    /// - Remark: HTTP `GET /status`.
    /// - Remark: Generated from `#/paths//status/get(getStatus)`.
    public enum getStatus {
        public static let id: Swift.String = "getStatus"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/status/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/status/GET/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStatus.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStatus.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.getStatus.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getStatus.Input.Headers) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/status/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/status/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Status)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Status {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getStatus.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getStatus.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//status/get(getStatus)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getStatus.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getStatus.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//status/get(getStatus)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// This method returns information about Battery Service.
    ///
    /// - Remark: HTTP `GET /config`.
    /// - Remark: Generated from `#/paths//config/get(getConfig)`.
    public enum getConfig {
        public static let id: Swift.String = "getConfig"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/config/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getConfig.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getConfig.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getConfig.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getConfig.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/config/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/config/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Config)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Config {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getConfig.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getConfig.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//config/get(getConfig)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getConfig.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getConfig.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//config/get(getConfig)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// This method returns information about a user's balance.
    ///
    /// - Remark: HTTP `GET /balance`.
    /// - Remark: Generated from `#/paths//balance/get(getBalance)`.
    public enum getBalance {
        public static let id: Swift.String = "getBalance"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/balance/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/balanceUnits`.
                @frozen public enum balanceUnits: String, Codable, Hashable, Sendable {
                    case usd = "usd"
                    case ton = "ton"
                }
                /// - Remark: Generated from `#/paths/balance/GET/query/units`.
                public var units: Components.Parameters.balanceUnits?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - units:
                public init(units: Components.Parameters.balanceUnits? = nil) { self.units = units }
            }
            public var query: Operations.getBalance.Input.Query
            /// - Remark: Generated from `#/paths/balance/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/balance/GET/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBalance.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBalance.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.getBalance.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getBalance.Input.Query = .init(),
                headers: Operations.getBalance.Input.Headers
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/balance/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/balance/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Balance)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Balance {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBalance.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBalance.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//balance/get(getBalance)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBalance.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBalance.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//balance/get(getBalance)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /wallet/emulate`.
    /// - Remark: Generated from `#/paths//wallet/emulate/post(emulateMessageToWallet)`.
    public enum emulateMessageToWallet {
        public static let id: Swift.String = "emulateMessageToWallet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/wallet/emulate/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallet/emulate/POST/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                /// - Remark: Generated from `#/paths/wallet/emulate/POST/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.emulateMessageToWallet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.emulateMessageToWallet.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.emulateMessageToWallet.Input.Headers
            public var body: Components.RequestBodies.Boc
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(headers: Operations.emulateMessageToWallet.Input.Headers, body: Components.RequestBodies.Boc) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/wallet/emulate/POST/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallet/emulate/POST/responses/200/headers/Allowed-By-Battery`.
                    public var Allowed_hyphen_By_hyphen_Battery: Swift.Bool
                    /// - Remark: Generated from `#/paths/wallet/emulate/POST/responses/200/headers/Supported-By-Battery`.
                    public var Supported_hyphen_By_hyphen_Battery: Swift.Bool
                    /// - Remark: Generated from `#/paths/wallet/emulate/POST/responses/200/headers/Reject-Reason`.
                    public var Reject_hyphen_Reason: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Allowed_hyphen_By_hyphen_Battery:
                    ///   - Supported_hyphen_By_hyphen_Battery:
                    ///   - Reject_hyphen_Reason:
                    public init(
                        Allowed_hyphen_By_hyphen_Battery: Swift.Bool,
                        Supported_hyphen_By_hyphen_Battery: Swift.Bool,
                        Reject_hyphen_Reason: Swift.String? = nil
                    ) {
                        self.Allowed_hyphen_By_hyphen_Battery = Allowed_hyphen_By_hyphen_Battery
                        self.Supported_hyphen_By_hyphen_Battery = Supported_hyphen_By_hyphen_Battery
                        self.Reject_hyphen_Reason = Reject_hyphen_Reason
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.emulateMessageToWallet.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/wallet/emulate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/wallet/emulate/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/wallet/emulate/POST/responses/200/content/application\/json`.
                    case json(Operations.emulateMessageToWallet.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.emulateMessageToWallet.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.emulateMessageToWallet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.emulateMessageToWallet.Output.Ok.Headers,
                    body: Operations.emulateMessageToWallet.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// emulated message
            ///
            /// - Remark: Generated from `#/paths//wallet/emulate/post(emulateMessageToWallet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.emulateMessageToWallet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.emulateMessageToWallet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//wallet/emulate/post(emulateMessageToWallet)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Send message to blockchain
    ///
    /// - Remark: HTTP `POST /message`.
    /// - Remark: Generated from `#/paths//message/post(sendMessage)`.
    public enum sendMessage {
        public static let id: Swift.String = "sendMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/message/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/message/POST/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.sendMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.sendMessage.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.sendMessage.Input.Headers
            public var body: Components.RequestBodies.Boc
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(headers: Operations.sendMessage.Input.Headers, body: Components.RequestBodies.Boc) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// success
            ///
            /// - Remark: Generated from `#/paths//message/post(sendMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.sendMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.sendMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//message/post(sendMessage)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// verify an in-app purchase
    ///
    /// - Remark: HTTP `POST /purchase-battery/android`.
    /// - Remark: Generated from `#/paths//purchase-battery/android/post(androidBatteryPurchase)`.
    public enum androidBatteryPurchase {
        public static let id: Swift.String = "androidBatteryPurchase"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/purchase-battery/android/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchase-battery/android/POST/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.androidBatteryPurchase.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.androidBatteryPurchase.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.androidBatteryPurchase.Input.Headers
            public var body: Components.RequestBodies.AndroidBatteryPurchase
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.androidBatteryPurchase.Input.Headers,
                body: Components.RequestBodies.AndroidBatteryPurchase
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchase-battery/android/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/purchase-battery/android/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AndroidBatteryPurchaseStatus)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AndroidBatteryPurchaseStatus {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.androidBatteryPurchase.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.androidBatteryPurchase.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//purchase-battery/android/post(androidBatteryPurchase)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.androidBatteryPurchase.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.androidBatteryPurchase.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//purchase-battery/android/post(androidBatteryPurchase)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// - Remark: HTTP `POST /purchase-battery/ios/app-store-notification`.
    /// - Remark: Generated from `#/paths//purchase-battery/ios/app-store-notification/post(appStoreNotification)`.
    public enum appStoreNotification {
        public static let id: Swift.String = "appStoreNotification"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/purchase-battery/ios/app-store-notification/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.appStoreNotification.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.appStoreNotification.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.appStoreNotification.Input.Headers
            public var body: Components.RequestBodies.appStoreNotification
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.appStoreNotification.Input.Headers = .init(),
                body: Components.RequestBodies.appStoreNotification
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchase-battery/ios/app-store-notification/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/purchase-battery/ios/app-store-notification/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.appStoreResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.appStoreResponse {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.appStoreNotification.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.appStoreNotification.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//purchase-battery/ios/app-store-notification/post(appStoreNotification)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.appStoreNotification.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.appStoreNotification.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//purchase-battery/ios/app-store-notification/post(appStoreNotification)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// verify an in-app purchase
    ///
    /// - Remark: HTTP `POST /purchase-battery/ios`.
    /// - Remark: Generated from `#/paths//purchase-battery/ios/post(iosBatteryPurchase)`.
    public enum iosBatteryPurchase {
        public static let id: Swift.String = "iosBatteryPurchase"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/purchase-battery/ios/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchase-battery/ios/POST/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.iosBatteryPurchase.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.iosBatteryPurchase.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.iosBatteryPurchase.Input.Headers
            public var body: Components.RequestBodies.iOSBatteryPurchase
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.iosBatteryPurchase.Input.Headers,
                body: Components.RequestBodies.iOSBatteryPurchase
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchase-battery/ios/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/purchase-battery/ios/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.iOSBatteryPurchaseStatus)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.iOSBatteryPurchaseStatus {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.iosBatteryPurchase.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.iosBatteryPurchase.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//purchase-battery/ios/post(iosBatteryPurchase)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.iosBatteryPurchase.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.iosBatteryPurchase.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//purchase-battery/ios/post(iosBatteryPurchase)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// charge battery with promo code
    ///
    /// - Remark: HTTP `POST /purchase-battery/promo-code`.
    /// - Remark: Generated from `#/paths//purchase-battery/promo-code/post(promoCodeBatteryPurchase)`.
    public enum promoCodeBatteryPurchase {
        public static let id: Swift.String = "promoCodeBatteryPurchase"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/purchase-battery/promo-code/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchase-battery/promo-code/POST/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                /// - Remark: Generated from `#/paths/purchase-battery/promo-code/POST/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.promoCodeBatteryPurchase.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.promoCodeBatteryPurchase.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.promoCodeBatteryPurchase.Input.Headers
            public var body: Components.RequestBodies.promoCodeBatteryPurchase
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.promoCodeBatteryPurchase.Input.Headers,
                body: Components.RequestBodies.promoCodeBatteryPurchase
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchase-battery/promo-code/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/purchase-battery/promo-code/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.promoCodeBatteryPurchaseStatus)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.promoCodeBatteryPurchaseStatus {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.promoCodeBatteryPurchase.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.promoCodeBatteryPurchase.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//purchase-battery/promo-code/post(promoCodeBatteryPurchase)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.promoCodeBatteryPurchase.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.promoCodeBatteryPurchase.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//purchase-battery/promo-code/post(promoCodeBatteryPurchase)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// This method returns on-chain recharge methods.
    ///
    /// - Remark: HTTP `GET /recharge-methods`.
    /// - Remark: Generated from `#/paths//recharge-methods/get(getRechargeMethods)`.
    public enum getRechargeMethods {
        public static let id: Swift.String = "getRechargeMethods"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/recharge-methods/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/recharge-methods/GET/query/include_recharge_only`.
                public var include_recharge_only: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - include_recharge_only:
                public init(include_recharge_only: Swift.Bool? = nil) {
                    self.include_recharge_only = include_recharge_only
                }
            }
            public var query: Operations.getRechargeMethods.Input.Query
            /// - Remark: Generated from `#/paths/recharge-methods/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRechargeMethods.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRechargeMethods.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRechargeMethods.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getRechargeMethods.Input.Query = .init(),
                headers: Operations.getRechargeMethods.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/recharge-methods/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/recharge-methods/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RechargeMethods)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RechargeMethods {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRechargeMethods.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRechargeMethods.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//recharge-methods/get(getRechargeMethods)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRechargeMethods.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRechargeMethods.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//recharge-methods/get(getRechargeMethods)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// - Remark: HTTP `POST /request-refund`.
    /// - Remark: Generated from `#/paths//request-refund/post(requestRefund)`.
    public enum requestRefund {
        public static let id: Swift.String = "requestRefund"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/request-refund/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/request-refund/POST/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.requestRefund.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.requestRefund.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.requestRefund.Input.Headers
            public var body: Components.RequestBodies.requestRefund
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(headers: Operations.requestRefund.Input.Headers, body: Components.RequestBodies.requestRefund) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// success
            ///
            /// - Remark: Generated from `#/paths//request-refund/post(requestRefund)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.requestRefund.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.requestRefund.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//request-refund/post(requestRefund)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// This method returns a list of purchases made by a specific user.
    ///
    /// - Remark: HTTP `GET /purchases`.
    /// - Remark: Generated from `#/paths//purchases/get(getPurchases)`.
    public enum getPurchases {
        public static let id: Swift.String = "getPurchases"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/purchases/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchases/GET/query/limit`.
                public var limit: Components.Parameters.limitQuery?
                /// - Remark: Generated from `#/paths/purchases/GET/query/offset`.
                public var offset: Components.Parameters.offsetQuery?
                /// - Remark: Generated from `#/paths/purchases/GET/query/include_gifts_on_the_way`.
                public var include_gifts_on_the_way: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                ///   - include_gifts_on_the_way:
                public init(
                    limit: Components.Parameters.limitQuery? = nil,
                    offset: Components.Parameters.offsetQuery? = nil,
                    include_gifts_on_the_way: Swift.Bool? = nil
                ) {
                    self.limit = limit
                    self.offset = offset
                    self.include_gifts_on_the_way = include_gifts_on_the_way
                }
            }
            public var query: Operations.getPurchases.Input.Query
            /// - Remark: Generated from `#/paths/purchases/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchases/GET/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPurchases.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPurchases.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.getPurchases.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getPurchases.Input.Query = .init(),
                headers: Operations.getPurchases.Input.Headers
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/purchases/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/purchases/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Purchases)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Purchases {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getPurchases.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getPurchases.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//purchases/get(getPurchases)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getPurchases.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getPurchases.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//purchases/get(getPurchases)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// This method returns a list of transactions made by a specific user.
    ///
    /// - Remark: HTTP `GET /transactions`.
    /// - Remark: Generated from `#/paths//transactions/get(getTransactions)`.
    public enum getTransactions {
        public static let id: Swift.String = "getTransactions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/transactions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/GET/query/limit`.
                public var limit: Components.Parameters.limitQuery?
                /// - Remark: Generated from `#/paths/transactions/GET/query/offset`.
                public var offset: Components.Parameters.offsetQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                public init(
                    limit: Components.Parameters.limitQuery? = nil,
                    offset: Components.Parameters.offsetQuery? = nil
                ) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            public var query: Operations.getTransactions.Input.Query
            /// - Remark: Generated from `#/paths/transactions/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/GET/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTransactions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.token,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTransactions.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.getTransactions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getTransactions.Input.Query = .init(),
                headers: Operations.getTransactions.Input.Headers
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/transactions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/transactions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Transactions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Transactions {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getTransactions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getTransactions.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//transactions/get(getTransactions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getTransactions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getTransactions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//transactions/get(getTransactions)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// - Remark: HTTP `POST /gasless/estimate-cost/{jetton_master}`.
    /// - Remark: Generated from `#/paths//gasless/estimate-cost/{jetton_master}/post(estimateGaslessCost)`.
    public enum estimateGaslessCost {
        public static let id: Swift.String = "estimateGaslessCost"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gasless/estimate-cost/{jetton_master}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gasless/estimate-cost/{jetton_master}/POST/path/jetton_master`.
                public var jetton_master: Components.Parameters.jettonMasterParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - jetton_master:
                public init(jetton_master: Components.Parameters.jettonMasterParameter) {
                    self.jetton_master = jetton_master
                }
            }
            public var path: Operations.estimateGaslessCost.Input.Path
            /// - Remark: Generated from `#/paths/gasless/estimate-cost/{jetton_master}/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gasless/estimate-cost/{jetton_master}/POST/query/wallet_address`.
                public var wallet_address: Swift.String?
                /// - Remark: Generated from `#/paths/gasless/estimate-cost/{jetton_master}/POST/query/wallet_public_key`.
                public var wallet_public_key: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - wallet_address:
                ///   - wallet_public_key:
                public init(wallet_address: Swift.String? = nil, wallet_public_key: Swift.String? = nil) {
                    self.wallet_address = wallet_address
                    self.wallet_public_key = wallet_public_key
                }
            }
            public var query: Operations.estimateGaslessCost.Input.Query
            /// - Remark: Generated from `#/paths/gasless/estimate-cost/{jetton_master}/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gasless/estimate-cost/{jetton_master}/POST/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.optionalToken?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.estimateGaslessCost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Components.Parameters.optionalToken? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.estimateGaslessCost.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.estimateGaslessCost.Input.Headers
            public var body: Components.RequestBodies.gaslessEstimateCost
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.estimateGaslessCost.Input.Path,
                query: Operations.estimateGaslessCost.Input.Query = .init(),
                headers: Operations.estimateGaslessCost.Input.Headers = .init(),
                body: Components.RequestBodies.gaslessEstimateCost
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gasless/estimate-cost/{jetton_master}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gasless/estimate-cost/{jetton_master}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.GaslessEstimation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.GaslessEstimation {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.estimateGaslessCost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.estimateGaslessCost.Output.Ok.Body) { self.body = body }
            }
            /// TBD
            ///
            /// - Remark: Generated from `#/paths//gasless/estimate-cost/{jetton_master}/post(estimateGaslessCost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.estimateGaslessCost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.estimateGaslessCost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//gasless/estimate-cost/{jetton_master}/post(estimateGaslessCost)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// - Remark: HTTP `POST /restricted/create-custom-refund`.
    /// - Remark: Generated from `#/paths//restricted/create-custom-refund/post(createCustomRefund)`.
    public enum createCustomRefund {
        public static let id: Swift.String = "createCustomRefund"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/restricted/create-custom-refund/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restricted/create-custom-refund/POST/query/token`.
                public var token: Components.Parameters.adminToken
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - token:
                public init(token: Components.Parameters.adminToken) { self.token = token }
            }
            public var query: Operations.createCustomRefund.Input.Query
            /// - Remark: Generated from `#/paths/restricted/create-custom-refund/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.createCustomRefund.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.createCustomRefund.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.createCustomRefund.Input.Headers
            public var body: Components.RequestBodies.customRefund
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.createCustomRefund.Input.Query,
                headers: Operations.createCustomRefund.Input.Headers = .init(),
                body: Components.RequestBodies.customRefund
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restricted/create-custom-refund/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/restricted/create-custom-refund/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/restricted/create-custom-refund/POST/responses/200/content/application\/json`.
                    case json(Operations.createCustomRefund.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.createCustomRefund.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createCustomRefund.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createCustomRefund.Output.Ok.Body) { self.body = body }
            }
            /// all good
            ///
            /// - Remark: Generated from `#/paths//restricted/create-custom-refund/post(createCustomRefund)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createCustomRefund.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createCustomRefund.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//restricted/create-custom-refund/post(createCustomRefund)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// - Remark: HTTP `POST /restricted/purchases/{purchase_id}/extend-refund-period`.
    /// - Remark: Generated from `#/paths//restricted/purchases/{purchase_id}/extend-refund-period/post(extendRefundPeriod)`.
    public enum extendRefundPeriod {
        public static let id: Swift.String = "extendRefundPeriod"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/restricted/purchases/{purchase_id}/extend-refund-period/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restricted/purchases/{purchase_id}/extend-refund-period/POST/path/purchase_id`.
                public var purchase_id: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - purchase_id:
                public init(purchase_id: Swift.Int64) { self.purchase_id = purchase_id }
            }
            public var path: Operations.extendRefundPeriod.Input.Path
            /// - Remark: Generated from `#/paths/restricted/purchases/{purchase_id}/extend-refund-period/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restricted/purchases/{purchase_id}/extend-refund-period/POST/query/token`.
                public var token: Components.Parameters.adminToken
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - token:
                public init(token: Components.Parameters.adminToken) { self.token = token }
            }
            public var query: Operations.extendRefundPeriod.Input.Query
            /// - Remark: Generated from `#/paths/restricted/purchases/{purchase_id}/extend-refund-period/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.extendRefundPeriod.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.extendRefundPeriod.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.extendRefundPeriod.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.extendRefundPeriod.Input.Path,
                query: Operations.extendRefundPeriod.Input.Query,
                headers: Operations.extendRefundPeriod.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/restricted/purchases/{purchase_id}/extend-refund-period/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/restricted/purchases/{purchase_id}/extend-refund-period/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/restricted/purchases/{purchase_id}/extend-refund-period/POST/responses/200/content/application\/json`.
                    case json(Operations.extendRefundPeriod.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.extendRefundPeriod.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.extendRefundPeriod.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.extendRefundPeriod.Output.Ok.Body) { self.body = body }
            }
            /// all good
            ///
            /// - Remark: Generated from `#/paths//restricted/purchases/{purchase_id}/extend-refund-period/post(extendRefundPeriod)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.extendRefundPeriod.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.extendRefundPeriod.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//restricted/purchases/{purchase_id}/extend-refund-period/post(extendRefundPeriod)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
}
